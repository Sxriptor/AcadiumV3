import React, { useState, useEffect, useCallback } from 'react';
import { useTheme } from '../../components/ui/ThemeProvider';
import { EnhancedChecklist } from '../../components/shared/EnhancedChecklist';
import { MiniAppSwitcher } from '../../components/shared/MiniAppSwitcher';
import { MainContentTabs } from '../../components/shared/MainContentTabs';
import { 
  Plug, 
  Database, 
  Webhook, 
  Cloud, 
  MessageSquare,
  ChevronRight,
  ChevronDown,
  CheckCircle,
  Minus,
  CreditCard,
  Brain,
  Zap,
  RefreshCw,
  Loader2
} from 'lucide-react';
import { useUserProgress } from '../../hooks/useUserProgress';

interface Step {
  id: string;
  title: string;
  description: string;
  content: React.ReactNode;
  estimated_time?: string;
  difficulty?: 'Beginner' | 'Intermediate' | 'Advanced';
}

interface StepSection {
  id: string;
  title: string;
  description: string;
  steps: Step[];
}

interface LearningPath {
  id: string;
  title: string;
  icon: React.ReactNode;
  description: string;
  sections: StepSection[];
}

const N8nIntegrate: React.FC = () => {
  const { theme } = useTheme();
  const [activeApp, setActiveApp] = useState('supabase');
  const [openTabs, setOpenTabs] = useState<Array<{id: string, title: string, content: React.ReactNode}>>([]);
  const [activeTab, setActiveTab] = useState('');
  const [expandedStep, setExpandedStep] = useState<string | null>(null);
  const [checklistCollapsed, setChecklistCollapsed] = useState(false);
  
  // Use the custom hook for user progress
  const { 
    completedSteps, 
    loading: progressLoading, 
    markStepComplete, 
    markStepIncomplete, 
    isStepCompleted 
  } = useUserProgress(activeApp);

  const miniApps = [
    { id: 'supabase', name: 'Supabase', icon: 'üóÑÔ∏è' },
    { id: 'stripe', name: 'Stripe', icon: 'üí≥' },
    { id: 'discord', name: 'Discord', icon: 'üí¨' },
    { id: 'openai', name: 'OpenAI', icon: 'üß†' },
    { id: 'zapier', name: 'Zapier', icon: '‚ö°' },
    { id: 'make', name: 'Make', icon: 'üîÑ' },
    { id: 'webhooks', name: 'Webhooks', icon: 'üîó' }
  ];

  const checklistItems: { [key: string]: Array<{id: string, title: string, description: string, completed: boolean}> } = {
    supabase: [
      {
        id: 'setup-supabase-project',
        title: 'Set up Supabase project',
        description: 'Create and configure your Supabase project',
        completed: false
      },
      {
        id: 'configure-database-schema',
        title: 'Configure database schema',
        description: 'Design and implement database tables for n8n agents',
        completed: false
      },
      {
        id: 'setup-supabase-credentials',
        title: 'Set up Supabase credentials',
        description: 'Configure API keys and connection strings in n8n',
        completed: false
      },
      {
        id: 'test-database-connection',
        title: 'Test database connection',
        description: 'Verify n8n can connect to Supabase successfully',
        completed: false
      },
      {
        id: 'implement-row-level-security',
        title: 'Implement Row Level Security',
        description: 'Set up RLS policies for secure data access',
        completed: false
      },
      {
        id: 'setup-realtime-subscriptions',
        title: 'Set up real-time subscriptions',
        description: 'Configure real-time data sync between n8n and Supabase',
        completed: false
      }
    ],
    stripe: [
      {
        id: 'create-stripe-account',
        title: 'Create Stripe account',
        description: 'Set up your Stripe account and verify business details',
        completed: false
      },
      {
        id: 'configure-stripe-api-keys',
        title: 'Configure Stripe API keys',
        description: 'Add Stripe API keys to n8n credentials',
        completed: false
      },
      {
        id: 'setup-payment-intents',
        title: 'Set up Payment Intents',
        description: 'Configure Payment Intent workflows in n8n',
        completed: false
      },
      {
        id: 'implement-webhooks',
        title: 'Implement Stripe webhooks',
        description: 'Set up webhook endpoints for payment events',
        completed: false
      },
      {
        id: 'test-payment-flows',
        title: 'Test payment flows',
        description: 'Run test transactions to verify integration',
        completed: false
      },
      {
        id: 'setup-subscription-management',
        title: 'Set up subscription management',
        description: 'Configure recurring payment and subscription workflows',
        completed: false
      }
    ],
    discord: [
      {
        id: 'create-discord-bot',
        title: 'Create Discord bot',
        description: 'Set up a Discord application and bot user',
        completed: false
      },
      {
        id: 'configure-bot-permissions',
        title: 'Configure bot permissions',
        description: 'Set appropriate permissions and scopes for your bot',
        completed: false
      },
      {
        id: 'setup-discord-credentials',
        title: 'Set up Discord credentials',
        description: 'Add bot token and credentials to n8n',
        completed: false
      },
      {
        id: 'implement-message-workflows',
        title: 'Implement message workflows',
        description: 'Create workflows for sending and receiving Discord messages',
        completed: false
      },
      {
        id: 'setup-slash-commands',
        title: 'Set up slash commands',
        description: 'Configure Discord slash commands integration',
        completed: false
      },
      {
        id: 'test-bot-functionality',
        title: 'Test bot functionality',
        description: 'Verify all Discord bot features work correctly',
        completed: false
      }
    ],
    openai: [
      {
        id: 'setup-openai-account',
        title: 'Set up OpenAI account',
        description: 'Create OpenAI account and generate API key',
        completed: false
      },
      {
        id: 'configure-openai-credentials',
        title: 'Configure OpenAI credentials',
        description: 'Add OpenAI API key to n8n credentials',
        completed: false
      },
      {
        id: 'implement-chat-completion',
        title: 'Implement chat completion',
        description: 'Set up GPT chat completion workflows',
        completed: false
      },
      {
        id: 'configure-prompt-templates',
        title: 'Configure prompt templates',
        description: 'Create reusable prompt templates for consistent results',
        completed: false
      },
      {
        id: 'setup-function-calling',
        title: 'Set up function calling',
        description: 'Implement OpenAI function calling capabilities',
        completed: false
      },
      {
        id: 'implement-content-moderation',
        title: 'Implement content moderation',
        description: 'Add OpenAI moderation for safe content handling',
        completed: false
      }
    ],
    zapier: [
      {
        id: 'setup-zapier-account',
        title: 'Set up Zapier account',
        description: 'Create and configure your Zapier account',
        completed: false
      },
      {
        id: 'create-zapier-webhooks',
        title: 'Create Zapier webhooks',
        description: 'Set up webhook triggers and actions in Zapier',
        completed: false
      },
      {
        id: 'configure-n8n-endpoints',
        title: 'Configure n8n endpoints',
        description: 'Set up n8n webhook endpoints for Zapier integration',
        completed: false
      },
      {
        id: 'map-data-between-platforms',
        title: 'Map data between platforms',
        description: 'Configure data transformation between n8n and Zapier',
        completed: false
      },
      {
        id: 'test-automation-flows',
        title: 'Test automation flows',
        description: 'Verify end-to-end automation between n8n and Zapier',
        completed: false
      },
      {
        id: 'setup-error-handling',
        title: 'Set up error handling',
        description: 'Implement robust error handling for failed integrations',
        completed: false
      }
    ],
    make: [
      {
        id: 'setup-make-account',
        title: 'Set up Make account',
        description: 'Create and configure your Make (formerly Integromat) account',
        completed: false
      },
      {
        id: 'create-make-scenarios',
        title: 'Create Make scenarios',
        description: 'Build scenarios in Make to connect with n8n',
        completed: false
      },
      {
        id: 'configure-http-modules',
        title: 'Configure HTTP modules',
        description: 'Set up HTTP modules for n8n webhook communication',
        completed: false
      },
      {
        id: 'implement-data-mapping',
        title: 'Implement data mapping',
        description: 'Configure data transformation between Make and n8n',
        completed: false
      },
      {
        id: 'setup-scheduling',
        title: 'Set up scheduling',
        description: 'Configure scheduled triggers and execution timing',
        completed: false
      },
      {
        id: 'test-scenario-execution',
        title: 'Test scenario execution',
        description: 'Verify Make scenarios execute correctly with n8n',
        completed: false
      }
    ],
    webhooks: [
      {
        id: 'design-webhook-structure',
        title: 'Design webhook structure',
        description: 'Plan webhook payload structure and endpoints',
        completed: false
      },
      {
        id: 'setup-webhook-endpoints',
        title: 'Set up webhook endpoints',
        description: 'Configure n8n webhook trigger nodes',
        completed: false
      },
      {
        id: 'implement-webhook-security',
        title: 'Implement webhook security',
        description: 'Add authentication and signature verification',
        completed: false
      },
      {
        id: 'configure-payload-validation',
        title: 'Configure payload validation',
        description: 'Set up data validation for incoming webhook data',
        completed: false
      },
      {
        id: 'setup-retry-mechanisms',
        title: 'Set up retry mechanisms',
        description: 'Implement retry logic for failed webhook deliveries',
        completed: false
      },
      {
        id: 'test-webhook-delivery',
        title: 'Test webhook delivery',
        description: 'Verify webhook endpoints receive and process data correctly',
        completed: false
      }
    ]
  };

  const learningPaths: { [key: string]: LearningPath } = {
    supabase: {
      id: 'supabase',
      title: 'n8n + Supabase Integration',
      icon: <Database className="h-5 w-5" />,
      description: 'Connect n8n agents to Supabase for database operations',
      sections: [
        {
          id: 'foundation',
          title: 'üóÑÔ∏è Foundation',
          description: 'Setup Supabase integration basics',
          steps: [
            {
              id: 'supabase-step-1',
              title: 'Agent Database Design',
              description: 'Design database schema for n8n agents',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h3 className="text-xl font-bold text-blue-800 dark:text-blue-200 mb-4">üóÑÔ∏è Agent Database Architecture</h3>
                      <p className="text-blue-700 dark:text-blue-300 mb-4">
                        Design a robust database schema that supports your n8n agents' data storage, workflow state management, and performance tracking.
                      </p>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Core Tables Structure</h4>
                        <div className="text-sm space-y-3">
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                            <p className="font-mono text-green-600 dark:text-green-400">agents</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ id (uuid, primary key)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ name (text, not null)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ workflow_id (text, not null)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ status (enum: active, paused, error)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ created_at (timestamp)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ updated_at (timestamp)</p>
                          </div>
                          
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                            <p className="font-mono text-green-600 dark:text-green-400">agent_executions</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ id (uuid, primary key)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ agent_id (uuid, foreign key)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ execution_id (text, not null)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ status (enum: running, success, failed)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ start_time (timestamp)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ end_time (timestamp)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ data (jsonb)</p>
                          </div>
                          
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                            <p className="font-mono text-green-600 dark:text-green-400">agent_metrics</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ id (uuid, primary key)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ agent_id (uuid, foreign key)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ metric_type (text)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ value (numeric)</p>
                            <p className="text-gray-600 dark:text-gray-400">‚Ä¢ recorded_at (timestamp)</p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">üìä Schema Best Practices</h4>
                      <ul className="space-y-2 text-green-700 dark:text-green-300">
                        <li>‚Ä¢ Use UUIDs for primary keys to avoid collisions</li>
                        <li>‚Ä¢ Add indexes on frequently queried columns (agent_id, status, created_at)</li>
                        <li>‚Ä¢ Use JSONB for flexible data storage with proper indexing</li>
                        <li>‚Ä¢ Implement proper foreign key constraints</li>
                        <li>‚Ä¢ Add check constraints for enum values</li>
                        <li>‚Ä¢ Use timestamps with timezone for consistency</li>
                      </ul>
                    </div>

                    <div className="bg-yellow-50 dark:bg-yellow-900/30 p-6 rounded-lg border border-yellow-200 dark:border-yellow-700">
                      <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-3">üöÄ Migration Script Example</h4>
                      <div className="bg-gray-900 p-4 rounded-lg overflow-x-auto">
                        <pre className="text-green-400 text-sm">
{`-- Create agents table
CREATE TABLE agents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  workflow_id TEXT NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('active', 'paused', 'error')),
  config JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create agents executions table
CREATE TABLE agent_executions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id UUID REFERENCES agents(id) ON DELETE CASCADE,
  execution_id TEXT NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('running', 'success', 'failed')),
  start_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  end_time TIMESTAMP WITH TIME ZONE,
  data JSONB DEFAULT '{}',
  error_message TEXT
);

-- Create indexes for performance
CREATE INDEX idx_agents_status ON agents(status);
CREATE INDEX idx_agents_created_at ON agents(created_at);
CREATE INDEX idx_agent_executions_agent_id ON agent_executions(agent_id);
CREATE INDEX idx_agent_executions_status ON agent_executions(status);`}
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'supabase-step-2',
              title: 'Setup Credentials',
              description: 'Configure Supabase credentials in n8n',
              estimated_time: '15 min',
              difficulty: 'Beginner',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üîê Supabase Credentials Setup</h3>
                      <p className="text-purple-700 dark:text-purple-300 mb-4">
                        Securely configure your Supabase project credentials in n8n for seamless database integration.
                      </p>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Step-by-Step Setup</h4>
                        <div className="space-y-4">
                          <div className="flex items-start space-x-3">
                            <div className="bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">1</div>
                            <div className="flex-1">
                              <p className="font-medium text-gray-800 dark:text-gray-200">Get Supabase Project URL</p>
                              <p className="text-gray-600 dark:text-gray-400 text-sm">Go to Settings ‚Üí API in your Supabase dashboard</p>
                              <div className="bg-gray-100 dark:bg-gray-700 p-2 rounded mt-2">
                                <code className="text-sm text-blue-600 dark:text-blue-400">https://your-project.supabase.co</code>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex items-start space-x-3">
                            <div className="bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">2</div>
                            <div className="flex-1">
                              <p className="font-medium text-gray-800 dark:text-gray-200">Copy API Keys</p>
                              <p className="text-gray-600 dark:text-gray-400 text-sm">Get both anon/public key and service_role key</p>
                              <div className="bg-gray-100 dark:bg-gray-700 p-2 rounded mt-2 space-y-1">
                                <div><span className="text-xs text-gray-500">Public Key:</span> <code className="text-sm text-green-600 dark:text-green-400">eyJ...</code></div>
                                <div><span className="text-xs text-gray-500">Service Key:</span> <code className="text-sm text-red-600 dark:text-red-400">eyJ...</code></div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex items-start space-x-3">
                            <div className="bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">3</div>
                            <div className="flex-1">
                              <p className="font-medium text-gray-800 dark:text-gray-200">Add to n8n Credentials</p>
                              <p className="text-gray-600 dark:text-gray-400 text-sm">Create new Supabase credential in n8n</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">Ô∏è n8n Configuration</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">In n8n Credentials Manager:</h5>
                          <ol className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <li>1. Click "Credentials" in the main menu</li>
                            <li>2. Click "Add Credential"</li>
                            <li>3. Search for "Supabase" and select it</li>
                            <li>4. Fill in the credential details:</li>
                          </ol>
                          
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded mt-3 space-y-2">
                            <div className="grid grid-cols-2 gap-4 text-sm">
                              <div>
                                <span className="font-medium text-gray-700 dark:text-gray-300">Host:</span>
                                <div className="font-mono text-blue-600 dark:text-blue-400">your-project.supabase.co</div>
                              </div>
                              <div>
                                <span className="font-medium text-gray-700 dark:text-gray-300">Database:</span>
                                <div className="font-mono text-blue-600 dark:text-blue-400">postgres</div>
                              </div>
                              <div>
                                <span className="font-medium text-gray-700 dark:text-gray-300">Port:</span>
                                <div className="font-mono text-blue-600 dark:text-blue-400">5432</div>
                              </div>
                              <div>
                                <span className="font-medium text-gray-700 dark:text-gray-300">SSL:</span>
                                <div className="font-mono text-green-600 dark:text-green-400">enabled</div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-900/30 p-6 rounded-lg border border-amber-200 dark:border-amber-700">
                      <h4 className="font-semibold text-amber-800 dark:text-amber-200 mb-3">‚ö†Ô∏è Security Best Practices</h4>
                      <ul className="space-y-2 text-amber-700 dark:text-amber-300">
                        <li>‚Ä¢ Never commit API keys to version control</li>
                        <li>‚Ä¢ Use environment variables for sensitive credentials</li>
                        <li>‚Ä¢ Regularly rotate your service role keys</li>
                        <li>‚Ä¢ Use the anon key for public operations only</li>
                        <li>‚Ä¢ Enable Row Level Security (RLS) on all tables</li>
                        <li>‚Ä¢ Monitor API usage and set up alerts</li>
                      </ul>
                    </div>

                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">‚úÖ Connection Test</h4>
                      <p className="text-green-700 dark:text-green-300 mb-3">Test your connection with this simple n8n workflow:</p>
                      <div className="bg-gray-900 p-4 rounded-lg">
                        <pre className="text-green-400 text-sm">
{`// Simple connection test query
SELECT version(), current_database(), current_user;

// Expected result:
// - PostgreSQL version information
// - Database name: postgres  
// - User: authenticated user`}
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'operations',
          title: 'üîß Operations',
          description: 'Agent data operations',
          steps: [
            {
              id: 'supabase-step-3',
              title: 'Agent Data CRUD',
              description: 'Create, read, update, delete agent data',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-indigo-50 dark:bg-indigo-900/30 p-6 rounded-lg border border-indigo-200 dark:border-indigo-700">
                      <h3 className="text-xl font-bold text-indigo-800 dark:text-indigo-200 mb-4">üîÑ Agent CRUD Operations</h3>
                      <p className="text-indigo-700 dark:text-indigo-300 mb-4">
                        Implement comprehensive Create, Read, Update, Delete operations for your n8n agents using Supabase.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3 flex items-center">
                            <span className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-2">C</span>
                            Create Agent
                          </h4>
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded text-sm">
                            <pre className="text-gray-800 dark:text-gray-200">
{`INSERT INTO agents (
  name,
  workflow_id,
  status,
  config
) VALUES (
  'Customer Support Bot',
  'wf_12345',
  'active',
  '{"response_time": 30}'
)`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3 flex items-center">
                            <span className="bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-2">R</span>
                            Read Agent
                          </h4>
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded text-sm">
                            <pre className="text-gray-800 dark:text-gray-200">
{`SELECT 
  id,
  name,
  status,
  created_at,
  config
FROM agents 
WHERE status = 'active'
ORDER BY created_at DESC`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3 flex items-center">
                            <span className="bg-yellow-100 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-2">U</span>
                            Update Agent
                          </h4>
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded text-sm">
                            <pre className="text-gray-800 dark:text-gray-200">
{`UPDATE agents SET
  status = 'paused',
  updated_at = NOW()
WHERE id = $1
RETURNING *`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3 flex items-center">
                            <span className="bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-2">D</span>
                            Delete Agent
                          </h4>
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded text-sm">
                            <pre className="text-gray-800 dark:text-gray-200">
{`DELETE FROM agents
WHERE id = $1 
AND status != 'running'
RETURNING id, name`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-emerald-50 dark:bg-emerald-900/30 p-6 rounded-lg border border-emerald-200 dark:border-emerald-700">
                      <h4 className="font-semibold text-emerald-800 dark:text-emerald-200 mb-3">üéØ n8n Workflow Examples</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">1. Create Agent Workflow</h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <p>‚Ä¢ Trigger: HTTP Request or Form submission</p>
                            <p>‚Ä¢ Validate: Check required fields (name, workflow_id)</p>
                            <p>‚Ä¢ Insert: Add new agent to Supabase</p>
                            <p>‚Ä¢ Response: Return agent ID and status</p>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">2. Batch Update Workflow</h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <p>‚Ä¢ Trigger: Schedule or webhook</p>
                            <p>‚Ä¢ Query: Get agents by status or condition</p>
                            <p>‚Ä¢ Process: Loop through agents</p>
                            <p>‚Ä¢ Update: Modify status or configuration</p>
                            <p>‚Ä¢ Log: Record operation results</p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-orange-50 dark:bg-orange-900/30 p-6 rounded-lg border border-orange-200 dark:border-orange-700">
                      <h4 className="font-semibold text-orange-800 dark:text-orange-200 mb-3">‚ö° Performance Optimization</h4>
                      <ul className="space-y-2 text-orange-700 dark:text-orange-300">
                        <li>‚Ä¢ Use prepared statements to prevent SQL injection</li>
                        <li>‚Ä¢ Implement connection pooling for high-volume operations</li>
                        <li>‚Ä¢ Add proper indexes on frequently queried columns</li>
                        <li>‚Ä¢ Use transactions for multi-table operations</li>
                        <li>‚Ä¢ Implement soft deletes instead of hard deletes</li>
                        <li>‚Ä¢ Cache frequently accessed agent data</li>
                      </ul>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üõ°Ô∏è Error Handling Patterns</h4>
                      <div className="bg-gray-900 p-4 rounded-lg">
                        <pre className="text-green-400 text-sm">
{`// n8n Error Handling Example
try {
  const result = await supabase
    .from('agents')
    .insert(agentData)
    .select();
    
  if (result.error) {
    throw new Error(result.error.message);
  }
  
  return result.data;
} catch (error) {
  console.error('Agent creation failed:', error);
  // Send to error tracking service
  // Return appropriate error response
}`}
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'supabase-step-4',
              title: 'Real-time Agent Updates',
              description: 'Handle real-time agent state changes',
              estimated_time: '25 min',
              difficulty: 'Intermediate',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-cyan-50 dark:bg-cyan-900/30 p-6 rounded-lg border border-cyan-200 dark:border-cyan-700">
                      <h3 className="text-xl font-bold text-cyan-800 dark:text-cyan-200 mb-4">‚ö° Real-time Agent Monitoring</h3>
                      <p className="text-cyan-700 dark:text-cyan-300 mb-4">
                        Set up real-time subscriptions to monitor agent status changes, execution updates, and performance metrics instantly.
                      </p>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Real-time Subscription Setup</h4>
                        <div className="space-y-4">
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                            <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">1. Enable Realtime on Tables</h5>
                            <div className="bg-gray-900 p-3 rounded text-sm">
                              <pre className="text-green-400">
{`-- Enable realtime for agents table
ALTER PUBLICATION supabase_realtime ADD TABLE agents;
ALTER PUBLICATION supabase_realtime ADD TABLE agent_executions;
ALTER PUBLICATION supabase_realtime ADD TABLE agent_metrics;`}
                              </pre>
</div>
                          </div>
                          
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                            <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">2. n8n Webhook Trigger Setup</h5>
                            <div className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                              <p>‚Ä¢ Create webhook trigger node in n8n</p>
                              <p>‚Ä¢ Configure endpoint URL for real-time updates</p>
                              <p>‚Ä¢ Set up authentication for secure connections</p>
                              <p>‚Ä¢ Add data transformation for incoming events</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-violet-50 dark:bg-violet-900/30 p-6 rounded-lg border border-violet-200 dark:border-violet-700">
                      <h4 className="font-semibold text-violet-800 dark:text-violet-200 mb-3">üîÑ Event Types & Handling</h4>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center">
                            <span className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2">+</span>
                            INSERT Events
                          </h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <p>‚Ä¢ New agent created</p>
                            <p>‚Ä¢ New execution started</p>
                            <p>‚Ä¢ Metric recorded</p>
                            <p>‚Ä¢ Trigger notifications</p>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center">
                            <span className="bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2">~</span>
                            UPDATE Events
                          </h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <p>‚Ä¢ Agent status change</p>
                            <p>‚Ä¢ Execution completed</p>
                            <p>‚Ä¢ Configuration updated</p>
                            <p>‚Ä¢ Update dashboards</p>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2 flex items-center">
                            <span className="bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2">-</span>
                            DELETE Events
                          </h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <p>‚Ä¢ Agent removed</p>
                            <p>‚Ä¢ Cleanup triggered</p>
                            <p>‚Ä¢ Archive old data</p>
                            <p>‚Ä¢ Send alerts</p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-teal-50 dark:bg-teal-900/30 p-6 rounded-lg border border-teal-200 dark:border-teal-700">
                      <h4 className="font-semibold text-teal-800 dark:text-teal-200 mb-3">üéØ Real-time Workflow Examples</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Agent Status Monitor</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400">
{`// n8n Workflow: Agent Status Monitor
Trigger: Supabase Realtime (agents table)
‚Üì
Filter: status = 'error'
‚Üì
Discord Notification: Send alert to team
‚Üì
Create Ticket: Auto-create support ticket
‚Üì
Log: Record incident for analysis`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Performance Metrics Dashboard</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400">
{`// n8n Workflow: Live Dashboard Updates
Trigger: Supabase Realtime (agent_metrics table)
‚Üì
Transform: Calculate averages and trends
‚Üì
WebSocket: Push to live dashboard
‚Üì
Threshold Check: Compare against limits
‚Üì
Alert: Notify if thresholds exceeded`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-pink-50 dark:bg-pink-900/30 p-6 rounded-lg border border-pink-200 dark:border-pink-700">
                      <h4 className="font-semibold text-pink-800 dark:text-pink-200 mb-3">üîß Connection Management</h4>
                      <ul className="space-y-2 text-pink-700 dark:text-pink-300">
                        <li>‚Ä¢ Implement connection pooling for multiple subscriptions</li>
                        <li>‚Ä¢ Add reconnection logic for dropped connections</li>
                        <li>‚Ä¢ Use heartbeat pings to maintain connection health</li>
                        <li>‚Ä¢ Implement exponential backoff for failed connections</li>
                        <li>‚Ä¢ Monitor connection metrics and performance</li>
                        <li>‚Ä¢ Set up graceful shutdown procedures</li>
                      </ul>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-900/30 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
                      <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìä Monitoring & Debugging</h4>
                      <div className="bg-gray-900 p-4 rounded-lg">
                        <pre className="text-green-400 text-sm">
{`// Real-time connection monitoring
const monitorConnection = {
  events_received: 0,
  connection_uptime: Date.now(),
  last_heartbeat: Date.now(),
  error_count: 0,
  reconnect_attempts: 0
};

// Log real-time events for debugging
supabase
  .channel('agents-channel')
  .on('postgres_changes', 
    { event: '*', schema: 'public', table: 'agents' },
    (payload) => {
      console.log('Real-time event:', payload);
      monitorConnection.events_received++;
    }
  )
  .subscribe();`}
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced agent-database patterns',
          steps: [
            {
              id: 'supabase-step-5',
              title: 'Agent Authentication',
              description: 'Implement Row Level Security for agents',
              estimated_time: '35 min',
              difficulty: 'Advanced',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-rose-50 dark:bg-rose-900/30 p-6 rounded-lg border border-rose-200 dark:border-rose-700">
                      <h3 className="text-xl font-bold text-rose-800 dark:text-rose-200 mb-4">üîê Row Level Security (RLS) for Agents</h3>
                      <p className="text-rose-700 dark:text-rose-300 mb-4">
                        Implement robust authentication and authorization system to secure your n8n agents with Supabase Row Level Security.
                      </p>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Enable RLS on Tables</h4>
                        <div className="bg-gray-900 p-4 rounded-lg text-sm">
                          <pre className="text-green-400 whitespace-pre-wrap">
                            {`-- Enable RLS on all agent-related tables
ALTER TABLE agents ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_executions ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_metrics ENABLE ROW LEVEL SECURITY;

-- Create user roles
CREATE ROLE agent_admin;
CREATE ROLE agent_user;
CREATE ROLE agent_readonly;`}
                          </pre>
                        </div>
                            </div>
                          </div>
                          
                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üõ°Ô∏è RLS Policy Examples</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Admin Full Access Policy</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`-- Admin can access all agents
CREATE POLICY "admin_all_access" ON agents
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin'
);`}
                          </pre>
                        </div>
                          </div>
                          
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">User Own Agents Policy</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`-- Users can only access their own agents
CREATE POLICY "user_own_agents" ON agents
FOR ALL USING (
  auth.uid() = user_id
);`}
                            </pre>
                      </div>
                    </div>

                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Team Shared Access Policy</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`-- Team members can access shared agents
CREATE POLICY "team_shared_access" ON agents
FOR SELECT USING (
  team_id IN (
    SELECT team_id FROM user_teams 
    WHERE user_id = auth.uid()
  )
);`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üîë JWT Token Management</h4>
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <div className="space-y-3">
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                            <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">n8n Workflow: Token Authentication</h5>
                            <div className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                              <p>1. Validate incoming JWT token</p>
                              <p>2. Extract user role and permissions</p>
                              <p>3. Set Supabase auth context</p>
                              <p>4. Execute database operations</p>
                              <p>5. Return filtered results based on RLS</p>
                            </div>
                          </div>
                          
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Function Node: JWT Validation
const jwt = $input.first().headers.authorization?.replace('Bearer ', '');

try {
  const decoded = await verifyJWT(jwt);
  
  // Set auth context for Supabase
  const supabase = createClient(url, key, {
    global: {
      headers: {
        Authorization: \`Bearer \${jwt}\`
      }
    }
  });
  
  return { supabase, user: decoded };
} catch (error) {
  throw new Error('Invalid authentication token');
}`}
                          </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">üîê Security Best Practices</h4>
                      <ul className="space-y-2 text-green-700 dark:text-green-300">
                        <li>‚Ä¢ Always use HTTPS for token transmission</li>
                        <li>‚Ä¢ Implement token refresh mechanisms</li>
                        <li>‚Ä¢ Use short-lived access tokens (15-60 minutes)</li>
                        <li>‚Ä¢ Store refresh tokens securely (HttpOnly cookies)</li>
                        <li>‚Ä¢ Implement proper logout and token revocation</li>
                        <li>‚Ä¢ Monitor for suspicious authentication patterns</li>
                        <li>‚Ä¢ Use rate limiting on authentication endpoints</li>
                        <li>‚Ä¢ Implement multi-factor authentication where needed</li>
                      </ul>
                        </div>
                        </div>
                        </div>
              )
            },
            {
              id: 'supabase-step-6',
              title: 'Agent Triggers',
              description: 'Create database triggers for agent events',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-orange-50 dark:bg-orange-900/30 p-6 rounded-lg border border-orange-200 dark:border-orange-700">
                      <h3 className="text-xl font-bold text-orange-800 dark:text-orange-200 mb-4">‚ö° Database Triggers for Agent Automation</h3>
                      <p className="text-orange-700 dark:text-orange-300 mb-4">
                        Set up intelligent database triggers that automatically respond to agent events and maintain data consistency.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Trigger Types</h4>
                          <div className="space-y-2 text-sm">
                            <div className="flex items-center space-x-2">
                              <span className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 px-2 py-1 rounded text-xs">BEFORE</span>
                              <span className="text-gray-600 dark:text-gray-400">Data validation &amp; preprocessing</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs">AFTER</span>
                              <span className="text-gray-600 dark:text-gray-400">Notifications &amp; side effects</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 px-2 py-1 rounded text-xs">INSTEAD OF</span>
                              <span className="text-gray-600 dark:text-gray-400">Custom logic replacement</span>
                            </div>
                      </div>
                    </div>

                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Event Types</h4>
                          <div className="space-y-2 text-sm">
                            <div className="flex items-center space-x-2">
                              <span className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 px-2 py-1 rounded text-xs">INSERT</span>
                              <span className="text-gray-600 dark:text-gray-400">New agent created</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="bg-yellow-100 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded text-xs">UPDATE</span>
                              <span className="text-gray-600 dark:text-gray-400">Status &amp; config changes</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 px-2 py-1 rounded text-xs">DELETE</span>
                              <span className="text-gray-600 dark:text-gray-400">Agent cleanup</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-emerald-50 dark:bg-emerald-900/30 p-6 rounded-lg border border-emerald-200 dark:border-emerald-700">
                      <h4 className="font-semibold text-emerald-800 dark:text-emerald-200 mb-3">üîß Trigger Function Examples</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Auto-update timestamp trigger</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`-- Function to update timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply trigger to agents table
CREATE TRIGGER update_agents_updated_at 
  BEFORE UPDATE ON agents
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();`}
                          </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Agent status change notification</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`-- Function to notify status changes
CREATE OR REPLACE FUNCTION notify_agent_status_change()
RETURNS TRIGGER AS $$
BEGIN
  IF OLD.status != NEW.status THEN
    -- Webhook notification to n8n
    PERFORM http_post(
      'https://your-n8n-instance.com/webhook/agent-status',
      json_build_object(
        'agent_id', NEW.id,
        'old_status', OLD.status,
        'new_status', NEW.status,
        'timestamp', NOW()
      )::text,
      'application/json'
    );
  END IF;
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger
CREATE TRIGGER agent_status_change_notify
  AFTER UPDATE ON agents
  FOR EACH ROW
  EXECUTE FUNCTION notify_agent_status_change();`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-violet-50 dark:bg-violet-900/30 p-6 rounded-lg border border-violet-200 dark:border-violet-700">
                      <h4 className="font-semibold text-violet-800 dark:text-violet-200 mb-3">üéØ Advanced Trigger Patterns</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Audit Trail Trigger</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`-- Create audit table
CREATE TABLE agent_audit (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  table_name TEXT NOT NULL,
  record_id UUID NOT NULL,
  action TEXT NOT NULL,
  old_values JSONB,
  new_values JSONB,
  changed_by UUID,
  changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Audit trigger function
CREATE OR REPLACE FUNCTION audit_trigger()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO agent_audit (
    table_name,
    record_id,
    action,
    old_values,
    new_values,
    changed_by
  ) VALUES (
    TG_TABLE_NAME,
    COALESCE(NEW.id, OLD.id),
    TG_OP,
    CASE WHEN TG_OP != 'INSERT' THEN row_to_json(OLD) END,
    CASE WHEN TG_OP != 'DELETE' THEN row_to_json(NEW) END,
    auth.uid()
  );
  
  RETURN CASE TG_OP
    WHEN 'DELETE' THEN OLD
    ELSE NEW
  END;
END;
$$ language 'plpgsql';`}
                            </pre>
                          </div>
                        </div>
                          </div>
                        </div>

                    <div className="bg-amber-50 dark:bg-amber-900/30 p-6 rounded-lg border border-amber-200 dark:border-amber-700">
                      <h4 className="font-semibold text-amber-800 dark:text-amber-200 mb-3">‚ö†Ô∏è Trigger Best Practices</h4>
                      <ul className="space-y-2 text-amber-700 dark:text-amber-300">
                        <li>‚Ä¢ Keep trigger functions lightweight and fast</li>
                        <li>‚Ä¢ Use AFTER triggers for notifications to avoid blocking</li>
                        <li>‚Ä¢ Implement proper error handling in trigger functions</li>
                        <li>‚Ä¢ Avoid complex business logic in triggers</li>
                        <li>‚Ä¢ Use conditional logic to prevent unnecessary executions</li>
                        <li>‚Ä¢ Monitor trigger performance and execution times</li>
                        <li>‚Ä¢ Test triggers thoroughly in development environment</li>
                        <li>‚Ä¢ Document trigger behavior for team understanding</li>
                      </ul>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'supabase-step-7',
              title: 'Agent Analytics',
              description: 'Track and analyze agent performance',
              estimated_time: '30 min',
              difficulty: 'Advanced',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-indigo-50 dark:bg-indigo-900/30 p-6 rounded-lg border border-indigo-200 dark:border-indigo-700">
                      <h3 className="text-xl font-bold text-indigo-800 dark:text-indigo-200 mb-4">üìä Agent Performance Analytics</h3>
                      <p className="text-indigo-700 dark:text-indigo-300 mb-4">
                        Build comprehensive analytics system to monitor, analyze and optimize your n8n agents' performance and efficiency.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-green-600 dark:text-green-400">95.2%</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Success Rate</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">2.3s</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Avg Response</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">1,247</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Daily Executions</div>
                        </div>
                            </div>
                          </div>
                          
                    <div className="bg-cyan-50 dark:bg-cyan-900/30 p-6 rounded-lg border border-cyan-200 dark:border-cyan-700">
                      <h4 className="font-semibold text-cyan-800 dark:text-cyan-200 mb-3">üìà Analytics Tables Structure</h4>
                      <div className="bg-gray-900 p-4 rounded-lg text-sm">
                        <pre className="text-green-400 whitespace-pre-wrap">
                          {`-- Agent performance metrics table
CREATE TABLE agent_performance_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id UUID REFERENCES agents(id),
  metric_date DATE NOT NULL,
  total_executions INTEGER DEFAULT 0,
  successful_executions INTEGER DEFAULT 0,
  failed_executions INTEGER DEFAULT 0,
  avg_execution_time INTERVAL,
  min_execution_time INTERVAL,
  max_execution_time INTERVAL,
  total_processing_time INTERVAL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for fast queries
CREATE INDEX idx_performance_agent_date ON agent_performance_metrics(agent_id, metric_date);
CREATE INDEX idx_performance_date ON agent_performance_metrics(metric_date);

-- Agent usage patterns table
CREATE TABLE agent_usage_patterns (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id UUID REFERENCES agents(id),
  hour_of_day INTEGER CHECK (hour_of_day >= 0 AND hour_of_day <= 23),
  day_of_week INTEGER CHECK (day_of_week >= 0 AND day_of_week <= 6),
  execution_count INTEGER DEFAULT 0,
  avg_response_time INTERVAL,
  peak_usage_indicator BOOLEAN DEFAULT FALSE,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);`}
                        </pre>
                            </div>
                          </div>
                          
                    <div className="bg-emerald-50 dark:bg-emerald-900/30 p-6 rounded-lg border border-emerald-200 dark:border-emerald-700">
                      <h4 className="font-semibold text-emerald-800 dark:text-emerald-200 mb-3">üéØ Analytics Workflows</h4>
                      <div className="space-y-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Daily Performance Report</h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <p>‚Ä¢ <strong>Trigger:</strong> Schedule daily at midnight</p>
                            <p>‚Ä¢ <strong>Data Collection:</strong> Aggregate previous day's executions</p>
                            <p>‚Ä¢ <strong>Calculations:</strong> Success rates, response times, error patterns</p>
                            <p>‚Ä¢ <strong>Storage:</strong> Save metrics to performance table</p>
                            <p>‚Ä¢ <strong>Notifications:</strong> Send summary to team dashboard</p>
                            </div>
                          </div>
                          
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Real-time Performance Monitor</h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <p>‚Ä¢ <strong>Trigger:</strong> Agent execution completion</p>
                            <p>‚Ä¢ <strong>Processing:</strong> Calculate rolling averages</p>
                            <p>‚Ä¢ <strong>Thresholds:</strong> Check against performance limits</p>
                            <p>‚Ä¢ <strong>Alerts:</strong> Notify if anomalies detected</p>
                            <p>‚Ä¢ <strong>Dashboard:</strong> Update live performance widgets</p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-yellow-50 dark:bg-yellow-900/30 p-6 rounded-lg border border-yellow-200 dark:border-yellow-700">
                      <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-3">üìä Analytics Queries</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Top Performing Agents</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`SELECT 
  a.name,
  a.id,
  pm.successful_executions,
  pm.total_executions,
  ROUND(
    (pm.successful_executions::FLOAT / pm.total_executions * 100), 2
  ) as success_rate,
  pm.avg_execution_time
FROM agents a
JOIN agent_performance_metrics pm ON a.id = pm.agent_id
WHERE pm.metric_date = CURRENT_DATE - INTERVAL '1 day'
ORDER BY success_rate DESC, avg_execution_time ASC
LIMIT 10;`}
                          </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Usage Pattern Analysis</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`SELECT 
  hour_of_day,
  SUM(execution_count) as total_executions,
  AVG(avg_response_time) as avg_response,
  COUNT(DISTINCT agent_id) as active_agents
FROM agent_usage_patterns
WHERE updated_at >= NOW() - INTERVAL '7 days'
GROUP BY hour_of_day
ORDER BY hour_of_day;`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üö® Alert Configurations</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Performance Alerts</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ Success rate drops below 90%</li>
                            <li>‚Ä¢ Average response time &gt; 5 seconds</li>
                            <li>‚Ä¢ Error rate increases by 50%</li>
                            <li>‚Ä¢ No executions for 2+ hours</li>
                          </ul>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Capacity Alerts</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ Execution queue length &gt; 100</li>
                            <li>‚Ä¢ Memory usage &gt; 80%</li>
                            <li>‚Ä¢ Database connections &gt; 90%</li>
                            <li>‚Ä¢ API rate limit approaching</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üìã Dashboard Implementation</h4>
                      <div className="bg-gray-900 p-4 rounded-lg text-sm">
                        <pre className="text-green-400 whitespace-pre-wrap">
                          {`// n8n Workflow: Analytics Dashboard Data
// This workflow runs every 5 minutes to update dashboard

Trigger: Schedule (*/5 * * * *)
‚Üì
Supabase Query: Get real-time metrics
‚Üì
Transform: Calculate KPIs and trends
‚Üì
WebSocket Push: Update live dashboard
‚Üì
Cache: Store results for quick access
‚Üì
Log: Record dashboard update metrics

// Key Metrics to Track:
- Agent uptime percentage
- Execution success rates
- Response time distributions  
- Error frequency and types
- Resource utilization trends
- User satisfaction scores`}
                            </pre>
                          </div>
                        </div>
                  </div>
                </div>
              )
            }
          ]
        }
      ]
    },
    stripe: {
      id: 'stripe',
      title: 'n8n + Stripe Integration',
      icon: <CreditCard className="h-5 w-5" />,
      description: 'Connect n8n agents to Stripe for payment processing',
      sections: [
        {
          id: 'foundation',
          title: 'üí≥ Foundation',
          description: 'Setup Stripe payment integration',
          steps: [
            {
              id: 'stripe-step-1',
              title: 'Agent Payment Flows',
              description: 'Design payment workflows for agents',
              estimated_time: '25 min',
              difficulty: 'Beginner',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-emerald-50 dark:bg-emerald-900/30 p-6 rounded-lg border border-emerald-200 dark:border-emerald-700">
                      <h3 className="text-xl font-bold text-emerald-800 dark:text-emerald-200 mb-4">üí≥ Agent Payment Workflow Architecture</h3>
                      <p className="text-emerald-700 dark:text-emerald-300 mb-4">
                        Design comprehensive payment workflows that enable your n8n agents to handle various payment scenarios automatically.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">One-time Payments</h4>
                          <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <p>‚Ä¢ Product purchases and service fees</p>
                            <p>‚Ä¢ Event tickets and bookings</p>
                            <p>‚Ä¢ Digital downloads and licenses</p>
                            <p>‚Ä¢ Consultation and service payments</p>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Recurring Payments</h4>
                          <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <p>‚Ä¢ Monthly/annual subscriptions</p>
                            <p>‚Ä¢ SaaS service billing</p>
                            <p>‚Ä¢ Membership fees</p>
                            <p>‚Ä¢ Usage-based billing</p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üîÑ Payment Flow Patterns</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Standard Payment Flow</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Workflow: Standard Payment Processing
Trigger: HTTP Request (Payment initiated)
‚Üì
Validate: Check payment data and amount
‚Üì
Stripe: Create Payment Intent
‚Üì
Response: Return client secret to frontend
‚Üì
Webhook: Listen for payment completion
‚Üì
Update: Record successful payment
‚Üì
Notify: Send confirmation email/SMS`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Subscription Flow</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Workflow: Subscription Management
Trigger: HTTP Request (Subscription signup)
‚Üì
Stripe: Create Customer
‚Üì
Stripe: Create Subscription
‚Üì
Database: Store subscription details
‚Üì
Schedule: Set up billing cycle monitoring
‚Üì
Notify: Welcome email with subscription details`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üéØ Agent Payment Triggers</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Automated Triggers</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ Form submission with payment</li>
                            <li>‚Ä¢ E-commerce cart checkout</li>
                            <li>‚Ä¢ Service booking confirmation</li>
                            <li>‚Ä¢ Subscription renewal dates</li>
                            <li>‚Ä¢ Usage threshold exceeded</li>
                          </ul>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Manual Triggers</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ Admin payment processing</li>
                            <li>‚Ä¢ Custom invoicing</li>
                            <li>‚Ä¢ Refund requests</li>
                            <li>‚Ä¢ Payment plan setup</li>
                            <li>‚Ä¢ Dispute resolution</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-orange-50 dark:bg-orange-900/30 p-6 rounded-lg border border-orange-200 dark:border-orange-700">
                      <h4 className="font-semibold text-orange-800 dark:text-orange-200 mb-3">üí∞ Pricing Strategy Integration</h4>
                      <div className="bg-gray-900 p-4 rounded-lg text-sm">
                        <pre className="text-green-400 whitespace-pre-wrap">
                          {`// n8n Function: Dynamic Pricing Calculator
const calculatePrice = (basePrice, userTier, discount) => {
  let finalPrice = basePrice;
  
  // Apply tier-based pricing
  const tierMultipliers = {
    'basic': 1.0,
    'premium': 0.9,
    'enterprise': 0.8
  };
  
  finalPrice *= tierMultipliers[userTier] || 1.0;
  
  // Apply discount if valid
  if (discount && discount.active) {
    finalPrice *= (1 - discount.percentage / 100);
  }
  
  // Minimum price enforcement
  return Math.max(finalPrice, 0.50); // $0.50 minimum
};

// Usage in n8n workflow
const price = calculatePrice(29.99, 'premium', { active: true, percentage: 15 });
// Result: $22.94 (30% tier discount + 15% promo)`}
                          </pre>
                        </div>
                      </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üõ°Ô∏è Payment Security Considerations</h4>
                      <ul className="space-y-2 text-red-700 dark:text-red-300">
                        <li>‚Ä¢ Never store credit card information in n8n workflows</li>
                        <li>‚Ä¢ Always use Stripe's secure vault for payment methods</li>
                        <li>‚Ä¢ Implement proper webhook signature verification</li>
                        <li>‚Ä¢ Use HTTPS for all payment-related endpoints</li>
                        <li>‚Ä¢ Implement rate limiting on payment endpoints</li>
                        <li>‚Ä¢ Log all payment attempts for audit purposes</li>
                        <li>‚Ä¢ Set up fraud detection rules in Stripe dashboard</li>
                        <li>‚Ä¢ Monitor for suspicious payment patterns</li>
                      </ul>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'stripe-step-2',
              title: 'Stripe API Setup',
              description: 'Configure Stripe API keys in n8n',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üîë Stripe API Configuration</h3>
                      <p className="text-purple-700 dark:text-purple-300 mb-4">
                        Set up secure Stripe API integration in n8n with proper credential management and environment separation.
                      </p>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">Step 1: Get Stripe API Keys</h4>
                        <div className="space-y-3">
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            <p className="mb-2"><strong>1. Log into Stripe Dashboard:</strong></p>
                            <p>‚Ä¢ Go to <span className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">dashboard.stripe.com</span></p>
                            <p>‚Ä¢ Navigate to Developers ‚Üí API keys</p>
                          </div>
                          
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            <p className="mb-2"><strong>2. Copy Required Keys:</strong></p>
                            <div className="bg-gray-900 p-3 rounded">
                              <pre className="text-green-400 whitespace-pre-wrap">
                                {`Test Keys (for development):
‚Ä¢ Publishable key: pk_test_...
‚Ä¢ Secret key: sk_test_...

Live Keys (for production):
‚Ä¢ Publishable key: pk_live_...
‚Ä¢ Secret key: sk_live_...`}
                              </pre>
                            </div>
                          </div>
                        </div>
                            </div>
                          </div>
                          
                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üîê n8n Credential Setup</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Create Stripe Credentials in n8n</h5>
                          <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <p>1. In n8n, go to Settings ‚Üí Credentials</p>
                            <p>2. Click "Create Credential" ‚Üí Search for "Stripe"</p>
                            <p>3. Add your credentials:</p>
                          </div>
                          
                          <div className="bg-gray-900 p-3 rounded text-sm mt-3">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`n8n Stripe Credential Configuration:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Credential Name: Stripe Test/Live       ‚îÇ
‚îÇ Secret Key: sk_test_... or sk_live_...  ‚îÇ
‚îÇ Webhook Secret: whsec_... (optional)    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`}
                            </pre>
                            </div>
                          </div>
                          
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Environment Variables (Alternative)</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`# Add to n8n environment variables
STRIPE_SECRET_KEY_TEST=sk_test_your_key_here
STRIPE_SECRET_KEY_LIVE=sk_live_your_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Access in n8n workflows
const stripeKey = process.env.STRIPE_SECRET_KEY_TEST;`}
                          </pre>
                            </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">‚úÖ Test Connection</h4>
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">n8n Test Workflow</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                          <pre className="text-green-400 whitespace-pre-wrap">
                            {`// n8n Function Node: Test Stripe Connection
const stripe = require('stripe')(credentials.stripe.secretKey);

try {
  // Test API connection
  const account = await stripe.accounts.retrieve();
  
  return {
    status: 'success',
    account_id: account.id,
    country: account.country,
    currency: account.default_currency,
    charges_enabled: account.charges_enabled,
    payouts_enabled: account.payouts_enabled
  };
} catch (error) {
  return {
    status: 'error',
    message: error.message,
    type: error.type
  };
}`}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div className="bg-orange-50 dark:bg-orange-900/30 p-6 rounded-lg border border-orange-200 dark:border-orange-700">
                      <h4 className="font-semibold text-orange-800 dark:text-orange-200 mb-3">üåê Webhook Configuration</h4>
                      <div className="space-y-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Set up Webhook Endpoint</h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                            <p>1. In Stripe Dashboard ‚Üí Developers ‚Üí Webhooks</p>
                            <p>2. Click "Add endpoint"</p>
                            <p>3. Use your n8n webhook URL:</p>
                          </div>
                          
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`Webhook URL Examples:
https://your-n8n-instance.com/webhook/stripe-events
https://app.n8n.cloud/webhook/YOUR_UUID

Essential Events to Listen For:
‚Ä¢ payment_intent.succeeded
‚Ä¢ payment_intent.payment_failed
‚Ä¢ invoice.payment_succeeded
‚Ä¢ invoice.payment_failed
‚Ä¢ customer.subscription.created
‚Ä¢ customer.subscription.updated
‚Ä¢ customer.subscription.deleted`}
                          </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üîí Security Best Practices</h4>
                      <ul className="space-y-2 text-red-700 dark:text-red-300">
                        <li>‚Ä¢ <strong>Never expose secret keys:</strong> Keep them in n8n credentials, not in workflow code</li>
                        <li>‚Ä¢ <strong>Use test keys in development:</strong> Always test with test keys before going live</li>
                        <li>‚Ä¢ <strong>Rotate keys regularly:</strong> Generate new keys periodically for security</li>
                        <li>‚Ä¢ <strong>Webhook signature verification:</strong> Always verify webhook signatures</li>
                        <li>‚Ä¢ <strong>Restrict key permissions:</strong> Use restricted API keys when possible</li>
                        <li>‚Ä¢ <strong>Monitor API usage:</strong> Set up alerts for unusual API activity</li>
                        <li>‚Ä¢ <strong>Log all transactions:</strong> Keep detailed logs for audit purposes</li>
                      </ul>
                          </div>

                    <div className="bg-gray-50 dark:bg-gray-900/30 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
                      <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üõ†Ô∏è Quick Setup Checklist</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <p className="font-medium text-gray-800 dark:text-gray-200">Stripe Dashboard:</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Account created &amp; verified</li>
                            <li>‚òê Test API keys copied</li>
                            <li>‚òê Webhook endpoint configured</li>
                            <li>‚òê Essential events selected</li>
                          </ul>
                        </div>
                        
                        <div className="space-y-2">
                          <p className="font-medium text-gray-800 dark:text-gray-200">n8n Configuration:</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Stripe credentials created</li>
                            <li>‚òê Connection tested successfully</li>
                            <li>‚òê Webhook workflow created</li>
                            <li>‚òê Security measures implemented</li>
                          </ul>
                      </div>
                    </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'processing',
          title: '‚ö° Processing',
          description: 'Handle payment operations',
          steps: [
            {
              id: 'stripe-step-3',
              title: 'Agent Payment Processing',
              description: 'Process payments through agent workflows',
              estimated_time: '35 min',
              difficulty: 'Intermediate',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h3 className="text-xl font-bold text-green-800 dark:text-green-200 mb-4">üí≥ Agent Payment Processing Engine</h3>
                      <p className="text-green-700 dark:text-green-300 mb-4">
                        Build robust payment processing workflows that handle complex payment scenarios through n8n agents automatically.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-green-600 dark:text-green-400">$1.2M+</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Processed Monthly</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">99.8%</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Success Rate</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">&lt;2s</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Avg Processing</div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üöÄ Complete Payment Workflow</h4>
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">n8n Payment Processing Workflow</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                          <pre className="text-green-400 whitespace-pre-wrap">
                            {`// n8n Workflow: Complete Payment Processing
1. HTTP Trigger: Receive payment request
   ‚Üì
2. Data Validation: Validate amount, currency, customer
   ‚Üì
3. Fraud Check: Screen for suspicious activity
   ‚Üì
4. Stripe Payment Intent: Create payment intent
   ‚Üì
5. Customer Management: Create/update customer record
   ‚Üì
6. Payment Confirmation: Process payment method
   ‚Üì
7. Database Update: Record transaction details
   ‚Üì
8. Receipt Generation: Create and send receipt
   ‚Üì
9. Notification System: Send confirmations
   ‚Üì
10. Analytics Tracking: Log payment metrics`}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üí∞ Payment Intent Creation</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Basic Payment Intent</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Function Node: Create Payment Intent
const stripe = require('stripe')(credentials.stripe.secretKey);
const { amount, currency, customerId, metadata } = $input.first().json;

try {
  const paymentIntent = await stripe.paymentIntents.create({
    amount: Math.round(amount * 100), // Convert to cents
    currency: currency || 'usd',
    customer: customerId,
    automatic_payment_methods: {
      enabled: true,
    },
    metadata: {
      order_id: metadata.orderId,
      user_id: metadata.userId,
      product_type: metadata.productType
    },
    description: \`Payment for \${metadata.productType}\`
  });

  return {
    status: 'success',
    client_secret: paymentIntent.client_secret,
    payment_intent_id: paymentIntent.id,
    amount: paymentIntent.amount / 100,
    currency: paymentIntent.currency
  };
} catch (error) {
  return {
    status: 'error',
    message: error.message,
    code: error.code
  };
}`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üö® Error Handling &amp; Recovery</h4>
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Comprehensive Error Handling</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                          <pre className="text-green-400 whitespace-pre-wrap">
                            {`// n8n Error Handling Workflow
try {
  const result = await processPayment(paymentData);
  return result;
} catch (error) {
  
  const errorHandling = {
    'card_declined': {
      action: 'retry_with_different_card',
      user_message: 'Your card was declined. Please try a different payment method.',
      retry_count: 3
    },
    'insufficient_funds': {
      action: 'suggest_lower_amount', 
      user_message: 'Insufficient funds. Please check your account balance.',
      retry_count: 1
    },
    'expired_card': {
      action: 'request_card_update',
      user_message: 'Your card has expired. Please update your payment method.',
      retry_count: 0
    }
  };
  
  const errorType = error.code || 'generic_error';
  const handling = errorHandling[errorType];
  
  return {
    status: 'error',
    error_code: errorType,
    user_message: handling.user_message,
    retry_allowed: handling.retry_count > 0,
    suggested_action: handling.action
  };
}`}
                          </pre>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'stripe-step-4',
              title: 'Subscription Management',
              description: 'Handle recurring payments and subscriptions',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-indigo-50 dark:bg-indigo-900/30 p-6 rounded-lg border border-indigo-200 dark:border-indigo-700">
                      <h3 className="text-xl font-bold text-indigo-800 dark:text-indigo-200 mb-4">üîÑ Subscription Management System</h3>
                      <p className="text-indigo-700 dark:text-indigo-300 mb-4">
                        Build intelligent subscription management workflows that handle the complete lifecycle of recurring payments, from signup to cancellation, with automated billing and customer communication.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">$847K</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Monthly Recurring Revenue</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-green-600 dark:text-green-400">94.2%</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Retention Rate</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">3,421</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Active Subscribers</div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">üìã Subscription Lifecycle Management</h4>
                      <div className="space-y-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Complete Subscription Journey</h5>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-3">
                              <div className="flex items-center space-x-3">
                                <div className="w-8 h-8 bg-blue-100 dark:bg-blue-800 rounded-full flex items-center justify-center text-sm font-bold text-blue-800 dark:text-blue-200">1</div>
                                <div>
                                  <p className="font-medium text-gray-800 dark:text-gray-200">Subscription Creation</p>
                                  <p className="text-sm text-gray-600 dark:text-gray-400">Customer chooses plan and payment method</p>
                            </div>
                          </div>
                              <div className="flex items-center space-x-3">
                                <div className="w-8 h-8 bg-green-100 dark:bg-green-800 rounded-full flex items-center justify-center text-sm font-bold text-green-800 dark:text-green-200">2</div>
                                <div>
                                  <p className="font-medium text-gray-800 dark:text-gray-200">Automated Billing</p>
                                  <p className="text-sm text-gray-600 dark:text-gray-400">Recurring charges processed automatically</p>
                            </div>
                          </div>
                              <div className="flex items-center space-x-3">
                                <div className="w-8 h-8 bg-purple-100 dark:bg-purple-800 rounded-full flex items-center justify-center text-sm font-bold text-purple-800 dark:text-purple-200">3</div>
                                <div>
                                  <p className="font-medium text-gray-800 dark:text-gray-200">Usage Tracking</p>
                                  <p className="text-sm text-gray-600 dark:text-gray-400">Monitor service usage and limits</p>
                                </div>
                            </div>
                          </div>
                          
                            <div className="space-y-3">
                              <div className="flex items-center space-x-3">
                                <div className="w-8 h-8 bg-yellow-100 dark:bg-yellow-800 rounded-full flex items-center justify-center text-sm font-bold text-yellow-800 dark:text-yellow-200">4</div>
                                <div>
                                  <p className="font-medium text-gray-800 dark:text-gray-200">Plan Changes</p>
                                  <p className="text-sm text-gray-600 dark:text-gray-400">Upgrade, downgrade, or modify plans</p>
                            </div>
                          </div>
                              <div className="flex items-center space-x-3">
                                <div className="w-8 h-8 bg-orange-100 dark:bg-orange-800 rounded-full flex items-center justify-center text-sm font-bold text-orange-800 dark:text-orange-200">5</div>
                                <div>
                                  <p className="font-medium text-gray-800 dark:text-gray-200">Dunning Management</p>
                                  <p className="text-sm text-gray-600 dark:text-gray-400">Handle failed payments gracefully</p>
                        </div>
                      </div>
                              <div className="flex items-center space-x-3">
                                <div className="w-8 h-8 bg-red-100 dark:bg-red-800 rounded-full flex items-center justify-center text-sm font-bold text-red-800 dark:text-red-200">6</div>
                                <div>
                                  <p className="font-medium text-gray-800 dark:text-gray-200">Cancellation & Retention</p>
                                  <p className="text-sm text-gray-600 dark:text-gray-400">Handle cancellations and win-back campaigns</p>
                    </div>
                        </div>
                        </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üí° Smart Plan Management</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Dynamic Pricing Strategies</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-2">
                              <p className="font-medium text-gray-700 dark:text-gray-300">Tier-Based Pricing</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Basic: $9.99/month - Core features</li>
                                <li>‚Ä¢ Pro: $29.99/month - Advanced tools</li>
                                <li>‚Ä¢ Enterprise: $99.99/month - Full suite</li>
                                <li>‚Ä¢ Custom: Quote-based - Tailored solutions</li>
                              </ul>
                            </div>
                            <div className="space-y-2">
                              <p className="font-medium text-gray-700 dark:text-gray-300">Usage-Based Components</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ API calls: $0.01 per 100 requests</li>
                                <li>‚Ä¢ Storage: $0.10 per GB/month</li>
                                <li>‚Ä¢ Bandwidth: $0.05 per GB transferred</li>
                                <li>‚Ä¢ Users: $5.00 per additional user</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">n8n Subscription Creation Workflow</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Workflow: Create Subscription
Trigger: HTTP Request (Plan selection)
‚Üì
Validate: Check plan availability and pricing
‚Üì
Stripe Customer: Create or retrieve customer
‚Üì
Payment Method: Attach payment method to customer
‚Üì
Stripe Subscription: Create subscription with selected plan
‚Üì
Database: Store subscription details and preferences
‚Üì
Welcome Email: Send onboarding sequence
‚Üì
Provision Access: Grant access to subscribed features
‚Üì
Analytics: Track subscription conversion metrics`}
                              </pre>
                            </div>
                          </div>
                          </div>
                        </div>
                        
                    <div className="bg-amber-50 dark:bg-amber-900/30 p-6 rounded-lg border border-amber-200 dark:border-amber-700">
                      <h4 className="font-semibold text-amber-800 dark:text-amber-200 mb-3">üîÑ Automated Billing Workflows</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Billing Cycle Automation</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Pre-Billing Actions</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Calculate usage charges 3 days before billing</li>
                                <li>‚Ä¢ Send upcoming billing notifications</li>
                                <li>‚Ä¢ Verify payment method validity</li>
                                <li>‚Ä¢ Apply any pending plan changes</li>
                                <li>‚Ä¢ Process promotional credits or discounts</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Post-Billing Actions</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Send payment confirmation receipts</li>
                                <li>‚Ä¢ Update service access and quotas</li>
                                <li>‚Ä¢ Reset usage counters for new period</li>
                                <li>‚Ä¢ Generate and send detailed invoices</li>
                                <li>‚Ä¢ Update customer billing history</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Failed Payment Recovery</h5>
                            <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Smart Dunning Process
Payment Failed Event Received
‚Üì
Wait 1 Day ‚Üí Retry Payment Attempt #1
‚Üì
If Failed: Send friendly reminder email
‚Üì
Wait 3 Days ‚Üí Retry Payment Attempt #2  
‚Üì
If Failed: Send urgent payment notice + offer help
‚Üì
Wait 7 Days ‚Üí Final retry + restrict service access
‚Üì
If Failed: Cancel subscription + send retention offer
‚Üì
30 Days Later: Send win-back campaign`}
                            </pre>
                          </div>
                        </div>
                          </div>
                        </div>
                        
                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üìä Customer Communication System</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Automated Notifications</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <li>‚Ä¢ <strong>Welcome Series:</strong> Onboarding emails for new subscribers</li>
                            <li>‚Ä¢ <strong>Billing Reminders:</strong> Upcoming payment notifications</li>
                            <li>‚Ä¢ <strong>Payment Confirmations:</strong> Successful transaction receipts</li>
                            <li>‚Ä¢ <strong>Usage Alerts:</strong> Approaching plan limits warnings</li>
                            <li>‚Ä¢ <strong>Plan Changes:</strong> Upgrade/downgrade confirmations</li>
                            <li>‚Ä¢ <strong>Renewal Notices:</strong> Annual plan renewal reminders</li>
                          </ul>
                          </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Retention Campaigns</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <li>‚Ä¢ <strong>Cancellation Prevention:</strong> Exit intent surveys and offers</li>
                            <li>‚Ä¢ <strong>Win-back Campaigns:</strong> Special offers for cancelled customers</li>
                            <li>‚Ä¢ <strong>Upgrade Promotions:</strong> Feature-based upgrade suggestions</li>
                            <li>‚Ä¢ <strong>Loyalty Rewards:</strong> Long-term subscriber benefits</li>
                            <li>‚Ä¢ <strong>Re-engagement:</strong> Inactive user activation campaigns</li>
                            <li>‚Ä¢ <strong>Referral Programs:</strong> Subscriber-driven growth incentives</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">‚ö° Advanced Subscription Features</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Proration and Plan Changes</h5>
                          <div className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <p><strong>Immediate Upgrades:</strong> Grant access instantly, prorate charges for remaining period</p>
                            <p><strong>Scheduled Downgrades:</strong> Process at next billing cycle to avoid refunds</p>
                            <p><strong>Mid-cycle Changes:</strong> Calculate prorated amounts and adjust next invoice</p>
                            <p><strong>Trial Extensions:</strong> Extend trial periods for sales prospects</p>
                            </div>
                          </div>
                          
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Subscription Analytics Dashboard</h5>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-center">
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-blue-600 dark:text-blue-400">$45,230</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Monthly MRR</div>
                          </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-green-600 dark:text-green-400">2.3%</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Churn Rate</div>
                        </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-purple-600 dark:text-purple-400">$89</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Avg Revenue</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-orange-600 dark:text-orange-400">18.5</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Months LTV</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-900/30 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
                      <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üéØ Implementation Checklist</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Technical Setup:</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Configure Stripe Products and Prices</li>
                            <li>‚òê Set up subscription webhooks</li>
                            <li>‚òê Implement usage tracking system</li>
                            <li>‚òê Create customer portal integration</li>
                            <li>‚òê Build plan comparison interface</li>
                          </ul>
                        </div>
                        
                        <div>
                          <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Business Logic:</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Define pricing strategy and tiers</li>
                            <li>‚òê Set up automated email sequences</li>
                            <li>‚òê Create dunning management workflows</li>
                            <li>‚òê Implement retention campaigns</li>
                            <li>‚òê Build analytics and reporting dashboards</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
            },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced payment features',
          steps: [
            {
              id: 'stripe-step-5',
              title: 'Payment Webhooks',
              description: 'Handle Stripe webhook events in agents',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-indigo-50 dark:bg-indigo-900/30 p-6 rounded-lg border border-indigo-200 dark:border-indigo-700">
                      <h3 className="text-xl font-bold text-indigo-800 dark:text-indigo-200 mb-4">üîó Advanced Payment Webhook System</h3>
                      <p className="text-indigo-700 dark:text-indigo-300 mb-4">
                        Build a bulletproof webhook system that handles all Stripe events reliably, with automatic retry logic, event deduplication, and comprehensive monitoring for your n8n agents.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-green-600 dark:text-green-400">99.97%</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Webhook Reliability</div>
                            </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">&lt;500ms</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Processing Time</div>
                          </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">24/7</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Event Monitoring</div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-emerald-50 dark:bg-emerald-900/30 p-6 rounded-lg border border-emerald-200 dark:border-emerald-700">
                      <h4 className="font-semibold text-emerald-800 dark:text-emerald-200 mb-3">üéØ Critical Webhook Events</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Payment Events</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ <strong>payment_intent.succeeded:</strong> Payment completed successfully</li>
                            <li>‚Ä¢ <strong>payment_intent.payment_failed:</strong> Payment attempt failed</li>
                            <li>‚Ä¢ <strong>payment_intent.requires_action:</strong> 3D Secure required</li>
                            <li>‚Ä¢ <strong>payment_method.attached:</strong> New payment method added</li>
                            <li>‚Ä¢ <strong>charge.dispute.created:</strong> Customer disputed charge</li>
                          </ul>
                        </div>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Subscription Events</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ <strong>customer.subscription.created:</strong> New subscription started</li>
                            <li>‚Ä¢ <strong>customer.subscription.updated:</strong> Plan or billing changed</li>
                            <li>‚Ä¢ <strong>customer.subscription.deleted:</strong> Subscription cancelled</li>
                            <li>‚Ä¢ <strong>invoice.payment_succeeded:</strong> Recurring payment processed</li>
                            <li>‚Ä¢ <strong>invoice.payment_failed:</strong> Billing issue occurred</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">üîß n8n Webhook Processing Workflow</h4>
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Complete Webhook Handler</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                          <pre className="text-green-400 whitespace-pre-wrap">
                            {`// n8n Webhook Processing Workflow
1. Webhook Trigger: Receive Stripe event
   ‚Üì
2. Signature Verification: Validate webhook authenticity
   ‚Üì
3. Event Deduplication: Check if event already processed
   ‚Üì
4. Event Type Router: Route to specific handler
   ‚Üì
5. Business Logic: Process event-specific actions
   ‚Üì
6. Database Update: Record event and update records
   ‚Üì
7. External Notifications: Send emails/SMS if needed
   ‚Üì
8. Response Logging: Log success/failure details
   ‚Üì
9. Monitoring Alert: Send alerts for critical events
   ‚Üì
10. Acknowledgment: Return 200 OK to Stripe`}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üõ°Ô∏è Webhook Security Implementation</h4>
                      <div className="space-y-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Signature Verification Function</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Function: Verify Stripe Webhook Signature
const crypto = require('crypto');

function verifyStripeSignature(payload, signature, secret) {
  const elements = signature.split(',');
  let timestamp, signatures = [];
  
  elements.forEach(element => {
    const [key, value] = element.split('=');
    if (key === 't') timestamp = value;
    if (key === 'v1') signatures.push(value);
  });
  
  // Check timestamp (within 5 minutes)
  const currentTime = Math.floor(Date.now() / 1000);
  if (currentTime - timestamp > 300) {
    throw new Error('Webhook timestamp too old');
  }
  
  // Verify signature
  const expectedSignature = crypto
    .createHmac('sha256', secret)
    .update(timestamp + '.' + payload)
    .digest('hex');
  
  const isValid = signatures.some(sig => 
    crypto.timingSafeEqual(
      Buffer.from(expectedSignature), 
      Buffer.from(sig)
    )
  );
  
  if (!isValid) {
    throw new Error('Invalid webhook signature');
  }
  
  return true;
}`}
                          </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Event Deduplication Strategy</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <li>‚Ä¢ <strong>Event ID Tracking:</strong> Store processed event IDs in database</li>
                            <li>‚Ä¢ <strong>Idempotency Keys:</strong> Use Stripe's idempotency for API calls</li>
                            <li>‚Ä¢ <strong>Time Window:</strong> Keep event IDs for 30 days minimum</li>
                            <li>‚Ä¢ <strong>Redis Cache:</strong> Fast lookup for recent events</li>
                            <li>‚Ä¢ <strong>Cleanup Jobs:</strong> Periodic cleanup of old event records</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-900/30 p-6 rounded-lg border border-amber-200 dark:border-amber-700">
                      <h4 className="font-semibold text-amber-800 dark:text-amber-200 mb-3">üîÑ Retry Logic & Error Handling</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Exponential Backoff Strategy</h5>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Retry Schedule</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Attempt 1: Immediate</li>
                                <li>‚Ä¢ Attempt 2: 30 seconds later</li>
                                <li>‚Ä¢ Attempt 3: 2 minutes later</li>
                                <li>‚Ä¢ Attempt 4: 8 minutes later</li>
                                <li>‚Ä¢ Attempt 5: 32 minutes later</li>
                                <li>‚Ä¢ Final: Dead letter queue</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Error Categories</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ <span className="text-green-600">Transient:</span> Network, timeout</li>
                                <li>‚Ä¢ <span className="text-yellow-600">Rate Limit:</span> API limits hit</li>
                                <li>‚Ä¢ <span className="text-red-600">Permanent:</span> Invalid data</li>
                                <li>‚Ä¢ <span className="text-blue-600">Business:</span> Logic errors</li>
                                <li>‚Ä¢ <span className="text-purple-600">Security:</span> Auth failures</li>
                              </ul>
                            </div>
                            </div>
                          </div>
                          
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Dead Letter Queue Management</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Dead Letter Queue Handler
Failed Event Processing:
‚Üì
Store in Dead Letter Queue with:
‚Ä¢ Original event data
‚Ä¢ Error details and stack trace  
‚Ä¢ Retry attempt count
‚Ä¢ Failure timestamp
‚Ä¢ Processing context
‚Üì
Daily Review Process:
‚Ä¢ Analyze failure patterns
‚Ä¢ Fix systemic issues
‚Ä¢ Manually reprocess valid events
‚Ä¢ Update monitoring rules`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üìä Webhook Monitoring & Alerting</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Real-time Monitoring Dashboard</h5>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-center">
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-green-600 dark:text-green-400">1,247</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Events Today</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-blue-600 dark:text-blue-400">99.8%</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Success Rate</div>
                          </div>
                          <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-yellow-600 dark:text-yellow-400">3</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">In Retry Queue</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-red-600 dark:text-red-400">0</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Failed Events</div>
                          </div>
                        </div>
                      </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Critical Alert Conditions</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <li>‚Ä¢ <strong>High Failure Rate:</strong> &gt;5% failures in 15 minutes ‚Üí Immediate Slack alert</li>
                            <li>‚Ä¢ <strong>Processing Delays:</strong> &gt;2 minute average processing time ‚Üí Engineering alert</li>
                            <li>‚Ä¢ <strong>Dead Letter Growth:</strong> &gt;10 events in queue ‚Üí Daily review trigger</li>
                            <li>‚Ä¢ <strong>Security Issues:</strong> Invalid signatures detected ‚Üí Security team alert</li>
                            <li>‚Ä¢ <strong>Volume Anomalies:</strong> 50% deviation from normal ‚Üí Monitoring alert</li>
                          </ul>
                    </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'stripe-step-6',
              title: 'Dispute Handling',
              description: 'Manage payment disputes and chargebacks',
              estimated_time: '35 min',
              difficulty: 'Advanced',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h3 className="text-xl font-bold text-red-800 dark:text-red-200 mb-4">‚öñÔ∏è Advanced Dispute Management System</h3>
                      <p className="text-red-700 dark:text-red-300 mb-4">
                        Build an intelligent dispute management system that automatically handles chargebacks, gathers evidence, and protects your business revenue through n8n automation workflows.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-green-600 dark:text-green-400">73%</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Win Rate</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">$47K</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Protected Monthly</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">4.2hrs</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Avg Response Time</div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-900/30 p-6 rounded-lg border border-amber-200 dark:border-amber-700">
                      <h4 className="font-semibold text-amber-800 dark:text-amber-200 mb-3">üö® Dispute Types & Response Strategy</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Fraud Disputes</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ <strong>Unauthorized:</strong> Card used without permission</li>
                            <li>‚Ä¢ <strong>Fraudulent:</strong> Customer claims they didn't make purchase</li>
                            <li>‚Ä¢ <strong>Response Strategy:</strong> Provide transaction evidence, IP logs, delivery confirmation</li>
                            <li>‚Ä¢ <strong>Win Rate:</strong> 65% with proper documentation</li>
                            <li>‚Ä¢ <strong>Timeline:</strong> 7-10 days to respond</li>
                          </ul>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Service Disputes</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚Ä¢ <strong>Not Received:</strong> Customer claims no delivery</li>
                            <li>‚Ä¢ <strong>Not as Described:</strong> Product/service differs from listing</li>
                            <li>‚Ä¢ <strong>Response Strategy:</strong> Show delivery proof, feature documentation, communication logs</li>
                            <li>‚Ä¢ <strong>Win Rate:</strong> 82% with complete evidence</li>
                            <li>‚Ä¢ <strong>Timeline:</strong> 7 days to respond</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">ü§ñ n8n Automated Dispute Response</h4>
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Complete Dispute Workflow</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                          <pre className="text-green-400 whitespace-pre-wrap">
                            {`// n8n Dispute Management Workflow
1. Webhook Trigger: charge.dispute.created
   ‚Üì
2. Dispute Classification: Analyze dispute reason
   ‚Üì
3. Evidence Collection: Gather transaction data
   ‚Üì
4. Customer Lookup: Retrieve customer history
   ‚Üì
5. Risk Assessment: Calculate win probability
   ‚Üì
6. Auto-Response: Submit evidence if high confidence
   ‚Üì
7. Manual Review: Flag complex cases for review
   ‚Üì
8. Documentation: Create dispute case file
   ‚Üì
9. Tracking: Monitor dispute status updates
   ‚Üì
10. Outcome Analysis: Learn from results`}
                          </pre>
                        </div>
                      </div>
                    </div>
                        
                    <div className="bg-green-50 dark:bg-green-900/30 p-6 rounded-lg border border-green-200 dark:border-green-700">
                      <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">üìã Evidence Collection System</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                        <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Automated Evidence Gathering</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Transaction Evidence</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Payment confirmation details</li>
                                <li>‚Ä¢ Customer IP address and location</li>
                                <li>‚Ä¢ Device fingerprint information</li>
                                <li>‚Ä¢ Authentication logs (3D Secure)</li>
                                <li>‚Ä¢ Previous successful transactions</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Service Evidence</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Delivery/download confirmations</li>
                                <li>‚Ä¢ Customer service communications</li>
                                <li>‚Ä¢ Usage logs and activity data</li>
                                <li>‚Ä¢ Terms of service acceptance</li>
                                <li>‚Ä¢ Refund policy acknowledgment</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Evidence Compilation Function</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Function: Compile Dispute Evidence
async function compileEvidence(chargeId, disputeReason) {
  const evidence = {
    receipt: await getReceiptUrl(chargeId),
    customerCommunication: await getCustomerEmails(chargeId),
    shippingDocumentation: await getShippingProof(chargeId),
    serviceDocumentation: await getServiceLogs(chargeId),
    duplicateChargeDocumentation: null,
    refundPolicy: 'https://yoursite.com/refund-policy',
    refundPolicyDisclosure: 'Displayed at checkout',
    customerSignature: await getOrderSignature(chargeId),
    uncategorizedText: generateDisputeNarrative(chargeId, disputeReason)
  };
  
  // Add dispute-specific evidence
  if (disputeReason === 'fraudulent') {
    evidence.accessActivityLog = await getAccountActivity(chargeId);
    evidence.billingAddress = await getBillingAddress(chargeId);
    evidence.customerSignature = await getDigitalSignature(chargeId);
  }
  
  return evidence;
}`}
                          </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üéØ Smart Response Strategy</h4>
                      <div className="space-y-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Risk-Based Response Decision</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Decision Logic: Should We Fight This Dispute?
function shouldFightDispute(disputeAmount, evidence, customerHistory) {
  let score = 0;
  
  // Evidence strength scoring
  if (evidence.receipt) score += 20;
  if (evidence.deliveryConfirmation) score += 25;
  if (evidence.customerCommunication) score += 15;
  if (evidence.ipAddressMatch) score += 10;
  if (evidence.previousSuccessfulPayments > 0) score += 15;
  
  // Customer history factor
  if (customerHistory.disputeCount === 0) score += 15;
  if (customerHistory.disputeCount > 2) score -= 30;
  
  // Financial consideration
  const fightingCost = 15; // USD chargeback fee
  if (disputeAmount < fightingCost * 2) score -= 20;
  
  // Decision matrix
  if (score >= 70) return 'AUTO_FIGHT';
  if (score >= 40) return 'MANUAL_REVIEW'; 
  return 'ACCEPT_DISPUTE';
}`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Response Templates by Category</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                            <div className="space-y-2">
                              <p className="font-medium text-gray-700 dark:text-gray-300">Fraud Response</p>
                              <div className="text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 p-2 rounded">
                                "Transaction verified through multiple security checks including IP verification, device fingerprinting, and 3D Secure authentication. Customer has history of successful payments."
                              </div>
                            </div>
                            <div className="space-y-2">
                              <p className="font-medium text-gray-700 dark:text-gray-300">Service Response</p>
                              <div className="text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 p-2 rounded">
                                "Service delivered as described with confirmation receipt. Customer acknowledged terms at purchase. Support logs show no issues reported prior to dispute."
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-indigo-50 dark:bg-indigo-900/30 p-6 rounded-lg border border-indigo-200 dark:border-indigo-700">
                      <h4 className="font-semibold text-indigo-800 dark:text-indigo-200 mb-3">üìä Dispute Analytics & Prevention</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Dispute Prevention Dashboard</h5>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-center">
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-red-600 dark:text-red-400">2.1%</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Dispute Rate</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-green-600 dark:text-green-400">$8,450</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Won This Month</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-blue-600 dark:text-blue-400">14</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Active Cases</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-purple-600 dark:text-purple-400">6.2hrs</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Avg Response</div>
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Prevention Strategies</h5>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-2">
                            <li>‚Ä¢ <strong>Clear Billing Descriptors:</strong> Use recognizable business name on statements</li>
                            <li>‚Ä¢ <strong>Proactive Communication:</strong> Send delivery/access confirmations immediately</li>
                            <li>‚Ä¢ <strong>Customer Service Excellence:</strong> Resolve issues before they become disputes</li>
                            <li>‚Ä¢ <strong>Fraud Detection:</strong> Block suspicious transactions proactively</li>
                            <li>‚Ä¢ <strong>Clear Policies:</strong> Transparent refund and service terms</li>
                            <li>‚Ä¢ <strong>Documentation:</strong> Keep detailed records of all customer interactions</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-900/30 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
                      <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">‚úÖ Dispute Management Checklist</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Setup & Configuration:</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Configure dispute webhook endpoints</li>
                            <li>‚òê Set up evidence collection workflows</li>
                            <li>‚òê Create response templates</li>
                            <li>‚òê Implement risk scoring system</li>
                            <li>‚òê Set up monitoring and alerts</li>
                          </ul>
                        </div>
                        
                        <div>
                          <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Operational Excellence:</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Train team on dispute types</li>
                            <li>‚òê Establish escalation procedures</li>
                            <li>‚òê Review and optimize response rates</li>
                            <li>‚òê Implement prevention strategies</li>
                            <li>‚òê Regular performance analysis</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'stripe-step-7',
              title: 'Payment Analytics',
              description: 'Build payment analytics and reporting',
              estimated_time: '30 min',
              difficulty: 'Advanced',
              content: (
                <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                  <div className="space-y-6">
                    <div className="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg border border-blue-200 dark:border-blue-700">
                      <h3 className="text-xl font-bold text-blue-800 dark:text-blue-200 mb-4">üìä Advanced Payment Analytics Dashboard</h3>
                      <p className="text-blue-700 dark:text-blue-300 mb-4">
                        Build comprehensive payment analytics and reporting systems that provide deep insights into revenue patterns, customer behavior, and business performance through automated n8n workflows.
                      </p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-green-600 dark:text-green-400">$127K</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Monthly Revenue</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">2,847</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Transactions</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">$44.60</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Avg Order Value</div>
                        </div>
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border text-center">
                          <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">97.3%</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">Success Rate</div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-emerald-50 dark:bg-emerald-900/30 p-6 rounded-lg border border-emerald-200 dark:border-emerald-700">
                      <h4 className="font-semibold text-emerald-800 dark:text-emerald-200 mb-3">üìà Revenue Analytics Pipeline</h4>
                      <div className="space-y-4">
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">n8n Revenue Tracking Workflow</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Revenue Analytics Pipeline
1. Payment Webhook: Capture successful payments
   ‚Üì
2. Data Enrichment: Add customer and product details
   ‚Üì
3. Revenue Calculation: Calculate net revenue after fees
   ‚Üì
4. Time Series Storage: Store with timestamp for trending
   ‚Üì
5. Cohort Analysis: Group by customer acquisition date
   ‚Üì
6. Geographic Analysis: Analyze by customer location
   ‚Üì
7. Product Performance: Track revenue by product/plan
   ‚Üì
8. Dashboard Update: Push to analytics dashboard
   ‚Üì
9. Alert System: Notify on revenue anomalies
   ‚Üì
10. Report Generation: Create automated reports`}
                            </pre>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Key Revenue Metrics</h5>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Growth Metrics</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Monthly Recurring Revenue (MRR)</li>
                                <li>‚Ä¢ Annual Recurring Revenue (ARR)</li>
                                <li>‚Ä¢ Revenue Growth Rate</li>
                                <li>‚Ä¢ Customer Acquisition Cost (CAC)</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Customer Metrics</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Customer Lifetime Value (CLV)</li>
                                <li>‚Ä¢ Average Order Value (AOV)</li>
                                <li>‚Ä¢ Purchase Frequency</li>
                                <li>‚Ä¢ Customer Retention Rate</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Operational Metrics</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Payment Success Rate</li>
                                <li>‚Ä¢ Churn Rate</li>
                                <li>‚Ä¢ Refund Rate</li>
                                <li>‚Ä¢ Processing Fees</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-purple-50 dark:bg-purple-900/30 p-6 rounded-lg border border-purple-200 dark:border-purple-700">
                      <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">üéØ Customer Behavior Analytics</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Purchase Pattern Analysis</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Behavioral Segments</p>
                              <div className="space-y-2">
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600 dark:text-gray-400">High Value Customers</span>
                                  <span className="text-sm font-bold text-green-600 dark:text-green-400">23%</span>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600 dark:text-gray-400">Regular Customers</span>
                                  <span className="text-sm font-bold text-blue-600 dark:text-blue-400">45%</span>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600 dark:text-gray-400">Occasional Buyers</span>
                                  <span className="text-sm font-bold text-yellow-600 dark:text-yellow-400">32%</span>
                                </div>
                              </div>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Purchase Timing</p>
                              <div className="space-y-2">
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600 dark:text-gray-400">Peak Hours</span>
                                  <span className="text-sm font-bold text-purple-600 dark:text-purple-400">2-4 PM</span>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600 dark:text-gray-400">Best Days</span>
                                  <span className="text-sm font-bold text-indigo-600 dark:text-indigo-400">Tue-Thu</span>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600 dark:text-gray-400">Seasonal Peak</span>
                                  <span className="text-sm font-bold text-red-600 dark:text-red-400">Q4</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Customer Segmentation Function</h5>
                          <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Function: Customer Segmentation
function segmentCustomer(customerData) {
  const { totalSpent, orderCount, daysSinceFirst, avgOrderValue } = customerData;
  
  // High Value: >$500 spent, >5 orders, <365 days
  if (totalSpent > 500 && orderCount > 5 && daysSinceFirst < 365) {
    return {
      segment: 'HIGH_VALUE',
      priority: 'VIP',
      recommendedActions: ['personal_outreach', 'exclusive_offers', 'loyalty_program']
    };
  }
  
  // Regular: >$100 spent, >2 orders, active in last 90 days
  if (totalSpent > 100 && orderCount > 2 && daysSinceFirst < 90) {
    return {
      segment: 'REGULAR',
      priority: 'STANDARD',
      recommendedActions: ['email_campaigns', 'product_recommendations', 'seasonal_offers']
    };
  }
  
  // At Risk: No purchase in 180+ days
  if (daysSinceFirst > 180) {
    return {
      segment: 'AT_RISK',
      priority: 'RETENTION',
      recommendedActions: ['win_back_campaign', 'special_discount', 'survey_feedback']
    };
  }
  
  return {
    segment: 'OCCASIONAL',
    priority: 'GROWTH',
    recommendedActions: ['nurture_sequence', 'social_proof', 'limited_offers']
  };
}`}
                          </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-900/30 p-6 rounded-lg border border-amber-200 dark:border-amber-700">
                      <h4 className="font-semibold text-amber-800 dark:text-amber-200 mb-3">üìä Automated Reporting System</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Executive Dashboard Reports</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Daily Reports</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Revenue vs. target tracking</li>
                                <li>‚Ä¢ Transaction volume and success rates</li>
                                <li>‚Ä¢ Top performing products/plans</li>
                                <li>‚Ä¢ Payment method performance</li>
                                <li>‚Ä¢ Geographic revenue distribution</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Weekly Reports</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Customer acquisition and churn</li>
                                <li>‚Ä¢ Cohort analysis and retention</li>
                                <li>‚Ä¢ Revenue trends and forecasting</li>
                                <li>‚Ä¢ Failed payment analysis</li>
                                <li>‚Ä¢ Competitive benchmarking</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      
                      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Automated Report Generation</h5>
                        <div className="bg-gray-900 p-3 rounded text-sm">
                            <pre className="text-green-400 whitespace-pre-wrap">
                              {`// n8n Automated Report Workflow
Schedule: Daily at 8 AM
‚Üì
Data Collection: Gather payment data from last 24 hours
‚Üì
Calculations: Compute key metrics and comparisons
‚Üì
Visualization: Generate charts and graphs
‚Üì
Report Assembly: Create PDF/HTML report
‚Üì
Distribution: Email to stakeholders
‚Üì
Dashboard Update: Push to real-time dashboard
‚Üì
Alerts: Flag any anomalies or targets missed
‚Üì
Archive: Store report for historical analysis`}
                            </pre>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/30 p-6 rounded-lg border border-red-200 dark:border-red-700">
                      <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">üö® Revenue Intelligence & Alerts</h4>
                      <div className="space-y-4">
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Smart Alert System</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Revenue Alerts</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Daily revenue drops &gt;20%</li>
                                <li>‚Ä¢ Monthly target at risk</li>
                                <li>‚Ä¢ Unusual payment patterns</li>
                                <li>‚Ä¢ High-value customer churn</li>
                                <li>‚Ä¢ Refund rate spikes</li>
                              </ul>
                            </div>
                            <div>
                              <p className="font-medium text-gray-700 dark:text-gray-300 mb-2">Opportunity Alerts</p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>‚Ä¢ Revenue growth acceleration</li>
                                <li>‚Ä¢ New customer segments emerging</li>
                                <li>‚Ä¢ Product performance breakouts</li>
                                <li>‚Ä¢ Geographic expansion opportunities</li>
                                <li>‚Ä¢ Upsell/cross-sell potential</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border">
                          <h5 className="font-medium text-gray-800 dark:text-gray-200 mb-2">Revenue Forecasting</h5>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-center">
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-green-600 dark:text-green-400">$156K</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Next Month</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-blue-600 dark:text-blue-400">$1.8M</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Next Quarter</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-purple-600 dark:text-purple-400">89%</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">Confidence</div>
                            </div>
                            <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                              <div className="font-bold text-lg text-orange-600 dark:text-orange-400">+23%</div>
                              <div className="text-xs text-gray-600 dark:text-gray-400">YoY Growth</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-900/30 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
                      <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üéØ Implementation Roadmap</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Phase 1: Foundation</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Set up data collection workflows</li>
                            <li>‚òê Create basic revenue tracking</li>
                            <li>‚òê Implement customer segmentation</li>
                            <li>‚òê Build core metrics dashboard</li>
                            <li>‚òê Configure basic alerts</li>
                          </ul>
                        </div>
                        
                        <div>
                          <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Phase 2: Advanced Analytics</p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            <li>‚òê Add predictive analytics</li>
                            <li>‚òê Implement cohort analysis</li>
                            <li>‚òê Create automated reports</li>
                            <li>‚òê Build forecasting models</li>
                            <li>‚òê Optimize alert system</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        }
      ]
    },
    discord: {
      id: 'discord',
      title: 'n8n + Discord Integration',
      icon: <MessageSquare className="h-5 w-5" />,
      description: 'Connect n8n agents to Discord for communication',
      sections: [
        {
          id: 'foundation',
          title: 'üí¨ Foundation',
          description: 'Setup Discord bot integration',
          steps: [
            {
              id: 'discord-step-1',
              title: 'Agent Discord Design',
              description: 'Plan Discord bot interactions for agents',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üé® Discord Bot Architecture Design</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Create a comprehensive Discord bot architecture that integrates seamlessly with your n8n agents for 
                    automated community management, user engagement, and workflow automation.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üèóÔ∏è Step 1: Bot Purpose & Scope Definition</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Define Bot Functions:</strong></p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded border-l-4 border-blue-500`}>
                          <p className="font-medium text-blue-600 dark:text-blue-400">Core Functions</p>
                          <ul className="text-sm mt-2 space-y-1">
                            <li>‚Ä¢ User registration & verification</li>
                            <li>‚Ä¢ Automated responses & FAQs</li>
                            <li>‚Ä¢ Role management & permissions</li>
                            <li>‚Ä¢ Content moderation</li>
                          </ul>
                        </div>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded border-l-4 border-green-500`}>
                          <p className="font-medium text-green-600 dark:text-green-400">Agent Integration</p>
                          <ul className="text-sm mt-2 space-y-1">
                            <li>‚Ä¢ Workflow trigger notifications</li>
                            <li>‚Ä¢ Status updates & monitoring</li>
                            <li>‚Ä¢ Data collection & analytics</li>
                            <li>‚Ä¢ Cross-platform automation</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üéØ Step 2: Command Structure Planning</h4>
                    
                    <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                      {`Discord Bot Command Structure:

‚îå‚îÄ Admin Commands (/admin)
‚îÇ  ‚îú‚îÄ /admin setup - Configure bot settings
‚îÇ  ‚îú‚îÄ /admin monitor - View n8n agent status  
‚îÇ  ‚îî‚îÄ /admin logs - Access execution logs
‚îÇ
‚îú‚îÄ User Commands (/agent)
‚îÇ  ‚îú‚îÄ /agent status - Check workflow status
‚îÇ  ‚îú‚îÄ /agent trigger [workflow] - Manual trigger
‚îÇ  ‚îî‚îÄ /agent help - Command documentation
‚îÇ
‚îî‚îÄ Automation Commands (/auto)
   ‚îú‚îÄ /auto schedule [workflow] - Schedule execution
   ‚îú‚îÄ /auto stop [workflow] - Stop running workflow
   ‚îî‚îÄ /auto report - Generate status report`}
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">‚öôÔ∏è Step 3: Permission & Role Design</h4>
                    
                    <div className="space-y-3">
                      <p className="text-sm">Design a hierarchical permission system for bot interactions:</p>
                      <div className="space-y-2">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded flex items-center space-x-3`}>
                          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                          <div>
                            <p className="font-medium text-red-600 dark:text-red-400">Admin Role</p>
                            <p className="text-sm">Full bot control, n8n workflow management, server settings</p>
                          </div>
                        </div>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded flex items-center space-x-3`}>
                          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                          <div>
                            <p className="font-medium text-yellow-600 dark:text-yellow-400">Moderator Role</p>
                            <p className="text-sm">Limited workflow control, status monitoring, user management</p>
                          </div>
                        </div>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded flex items-center space-x-3`}>
                          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                          <div>
                            <p className="font-medium text-green-600 dark:text-green-400">User Role</p>
                            <p className="text-sm">Basic commands, status queries, help documentation</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Planning Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Bot purpose and scope documented</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Command structure planned and organized</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Permission hierarchy designed</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Integration points with n8n identified</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>User experience flow mapped</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'discord-step-2',
              title: 'Bot Setup',
              description: 'Create and configure Discord bot',
              estimated_time: '25 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">ü§ñ Discord Bot Creation & Configuration</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Set up a professional Discord bot with proper permissions, security, and n8n integration capabilities 
                    for automated workflow management and community engagement.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üèóÔ∏è Step 1: Discord Developer Portal Setup</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Create Discord Application:</strong></p>
                      <p>‚Ä¢ Go to <span className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">https://discord.com/developers/applications</span></p>
                      <p>‚Ä¢ Click "New Application" and name your bot (e.g., "N8N-Agent-Bot")</p>
                      <p>‚Ä¢ Add description: "Automated workflow management and community engagement"</p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`Discord Application Configuration:

‚îå‚îÄ General Information
‚îÇ  ‚îú‚îÄ Name: N8N-Agent-Bot
‚îÇ  ‚îú‚îÄ Description: Automated workflow management
‚îÇ  ‚îú‚îÄ App Icon: Upload bot avatar (256x256 PNG)
‚îÇ  ‚îî‚îÄ Tags: automation, workflows, integration
‚îÇ
‚îî‚îÄ OAuth2 Settings  
   ‚îú‚îÄ Client ID: [Generated automatically]
   ‚îú‚îÄ Client Secret: [Keep secure]
   ‚îî‚îÄ Redirect URLs: Add if using OAuth flows`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîë Step 2: Bot Token Generation</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Navigate to Bot Section:</strong></p>
                      <p>‚Ä¢ Click "Bot" in left sidebar of your application</p>
                      <p>‚Ä¢ Click "Add Bot" to create bot user</p>
                      <p>‚Ä¢ Configure bot settings and generate token</p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-red-600/20 border-red-500' : 'bg-red-50 dark:bg-red-900/20 border-red-300 dark:border-red-600'} border-l-4 p-4 mt-4`}>
                        <p className="font-semibold text-red-700 dark:text-red-400">üö® Security Critical</p>
                        <p className="text-sm mt-1">Never share your bot token publicly. Store it securely in environment variables.</p>
                      </div>

                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`Bot Configuration Settings:

‚îå‚îÄ Bot Settings
‚îÇ  ‚îú‚îÄ Username: n8n-agent-bot
‚îÇ  ‚îú‚îÄ Public Bot: ‚úÖ (Allow others to add)
‚îÇ  ‚îú‚îÄ Require OAuth2 Code Grant: ‚ùå
‚îÇ  ‚îú‚îÄ Bot Permissions: Administrator
‚îÇ  ‚îî‚îÄ Token: [Click Reset Token to generate]
‚îÇ
‚îú‚îÄ Privileged Gateway Intents
‚îÇ  ‚îú‚îÄ Presence Intent: ‚úÖ (For user status)
‚îÇ  ‚îú‚îÄ Server Members Intent: ‚úÖ (For member management)
‚îÇ  ‚îî‚îÄ Message Content Intent: ‚úÖ (For message processing)
‚îÇ
‚îî‚îÄ Environment Variables
   ‚îú‚îÄ DISCORD_BOT_TOKEN=your_bot_token_here
   ‚îú‚îÄ DISCORD_CLIENT_ID=your_client_id_here
   ‚îî‚îÄ DISCORD_GUILD_ID=your_server_id_here`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîó Step 3: Bot Invitation & Permissions</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Generate Invitation URL:</strong></p>
                      <p>‚Ä¢ Go to OAuth2 ‚Üí URL Generator</p>
                      <p>‚Ä¢ Select "bot" and "applications.commands" scopes</p>
                      <p>‚Ä¢ Configure required permissions for n8n integration</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded border-l-4 border-blue-500`}>
                          <p className="font-medium text-blue-600 dark:text-blue-400">Essential Permissions</p>
                          <ul className="text-sm mt-2 space-y-1">
                            <li>‚Ä¢ Send Messages</li>
                            <li>‚Ä¢ Use Slash Commands</li>
                            <li>‚Ä¢ Read Message History</li>
                            <li>‚Ä¢ Manage Messages</li>
                            <li>‚Ä¢ Embed Links</li>
                          </ul>
                        </div>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded border-l-4 border-green-500`}>
                          <p className="font-medium text-green-600 dark:text-green-400">Advanced Permissions</p>
                          <ul className="text-sm mt-2 space-y-1">
                            <li>‚Ä¢ Manage Roles</li>
                            <li>‚Ä¢ Kick Members</li>
                            <li>‚Ä¢ Ban Members</li>
                            <li>‚Ä¢ Manage Channels</li>
                            <li>‚Ä¢ View Audit Log</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîó Step 4: n8n Credential Configuration</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Add Discord Credentials in n8n:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`n8n Discord Credential Setup:

1. Go to n8n ‚Üí Credentials ‚Üí Add Credential
2. Search for "Discord" 
3. Configure credential fields:

‚îå‚îÄ Discord Bot Credential
‚îÇ  ‚îú‚îÄ Credential Name: Discord Bot Production
‚îÇ  ‚îú‚îÄ Bot Token: [Paste your bot token]
‚îÇ  ‚îú‚îÄ Test Connection: ‚úÖ Verify connection
‚îÇ  ‚îî‚îÄ Save: Store credential securely
‚îÇ
‚îî‚îÄ Test Configuration
   ‚îú‚îÄ Create simple test workflow
   ‚îú‚îÄ Add Discord node
   ‚îú‚îÄ Select your credential
   ‚îî‚îÄ Send test message to verify setup`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Setup Completion Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Discord application created with proper settings</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Bot token generated and stored securely</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Bot invited to server with correct permissions</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>n8n Discord credentials configured</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Connection tested successfully</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Environment variables documented</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'interaction',
          title: 'ü§ñ Interaction',
          description: 'Agent-Discord communication',
          steps: [
            {
              id: 'discord-step-3',
              title: 'Agent Commands',
              description: 'Create Discord commands for agent control',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">‚ö° Discord Slash Commands for n8n Agents</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Create powerful slash commands that allow Discord users to interact with n8n workflows directly, 
                    providing real-time control and monitoring of automated processes through your Discord server.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üèóÔ∏è Step 1: Command Registration & Structure</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Register Slash Commands:</strong></p>
                      <p>Create a comprehensive command system for n8n workflow management through Discord.</p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`n8n Discord Command Registration Workflow:

1. Command Registration Trigger
   ‚îú‚îÄ Manual Trigger: Run once to register commands
   ‚îî‚îÄ Discord API: Register slash commands

2. Register Agent Status Command
   ‚îú‚îÄ Command: /agent-status
   ‚îú‚îÄ Description: "Check n8n workflow status"
   ‚îú‚îÄ Options: workflow_name (optional)
   ‚îî‚îÄ Permissions: @everyone

3. Register Workflow Control Commands  
   ‚îú‚îÄ /workflow-start [name] - Start workflow
   ‚îú‚îÄ /workflow-stop [name] - Stop workflow  
   ‚îú‚îÄ /workflow-trigger [name] - Manual trigger
   ‚îî‚îÄ /workflow-logs [name] - View execution logs

4. Register Admin Commands
   ‚îú‚îÄ /admin-monitor - Full system status
   ‚îú‚îÄ /admin-restart [workflow] - Restart workflow
   ‚îî‚îÄ /admin-config - Configuration management`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">ü§ñ Step 2: Command Handler Implementation</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Create Command Processing Workflow:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`Discord Command Handler n8n Workflow:

‚îå‚îÄ Webhook Trigger (Discord Slash Commands)
‚îÇ  ‚îú‚îÄ Endpoint: /webhook/discord-commands
‚îÇ  ‚îú‚îÄ Method: POST
‚îÇ  ‚îî‚îÄ Authentication: Discord signature verification
‚îÇ
‚îú‚îÄ Command Router (Switch Node)
‚îÇ  ‚îú‚îÄ /agent-status ‚Üí Agent Status Handler
‚îÇ  ‚îú‚îÄ /workflow-start ‚Üí Workflow Starter
‚îÇ  ‚îú‚îÄ /workflow-stop ‚Üí Workflow Stopper
‚îÇ  ‚îú‚îÄ /admin-monitor ‚Üí Admin Dashboard
‚îÇ  ‚îî‚îÄ default ‚Üí Help Message
‚îÇ
‚îú‚îÄ Permission Checker (Function Node)
‚îÇ  ‚îú‚îÄ Check user roles and permissions
‚îÇ  ‚îú‚îÄ Validate command access level
‚îÇ  ‚îî‚îÄ Return authorization status
‚îÇ
‚îî‚îÄ Response Formatter (Discord Reply)
   ‚îú‚îÄ Format response message
   ‚îú‚îÄ Add embeds and buttons
   ‚îî‚îÄ Send reply to Discord`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üéÆ Step 3: Interactive Command Examples</h4>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-blue-500`}>
                        <p className="font-medium text-blue-600 dark:text-blue-400 mb-2">Agent Status Command</p>
                        <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm font-mono`}>
                          {`/agent-status data-processor

Response:
üìä Workflow Status: data-processor
üü¢ Status: Running
‚è±Ô∏è Last Execution: 2 min ago
üìà Success Rate: 98.5%
üîÑ Next Run: 15 min
[Stop] [Restart] [View Logs]`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-green-500`}>
                        <p className="font-medium text-green-600 dark:text-green-400 mb-2">Workflow Control</p>
                        <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm font-mono`}>
                          {`/workflow-start email-automation

Response:
üöÄ Starting Workflow...
‚úÖ Email Automation Started
üìß Processing 47 pending emails
‚è±Ô∏è Estimated completion: 3 min
[Monitor Progress] [Stop if Needed]`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîß Step 4: Advanced Command Features</h4>
                    
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                        <p className="font-medium mb-2">Auto-Complete & Validation:</p>
                        <ul className="text-sm space-y-1">
                          <li>‚Ä¢ Dynamic workflow name suggestions</li>
                          <li>‚Ä¢ Parameter validation before execution</li>
                          <li>‚Ä¢ Real-time permission checking</li>
                          <li>‚Ä¢ Context-aware command availability</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                        <p className="font-medium mb-2">Error Handling & Feedback:</p>
                        <ul className="text-sm space-y-1">
                          <li>‚Ä¢ Graceful error messages with solutions</li>
                          <li>‚Ä¢ Command usage hints and examples</li>
                          <li>‚Ä¢ Automatic retry suggestions</li>
                          <li>‚Ä¢ Help command with detailed documentation</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Command Implementation Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Slash commands registered in Discord</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Command handler workflow created</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Permission system implemented</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Interactive responses with buttons</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Error handling and validation</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Commands tested with different user roles</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'discord-step-4',
              title: 'Agent Notifications',
              description: 'Send agent updates to Discord channels',
              estimated_time: '25 min',
              difficulty: 'Intermediate',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üì¢ Automated Discord Notifications for n8n Agents</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Create a sophisticated notification system that keeps your Discord community informed about 
                    n8n workflow executions, system status changes, and important alerts in real-time.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üö® Step 1: Notification Channel Setup</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Create Dedicated Channels:</strong></p>
                      <p>Organize notifications into specific channels for different types of updates.</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded border-l-4 border-green-500`}>
                          <p className="font-medium text-green-600 dark:text-green-400">Success Notifications</p>
                          <ul className="text-sm mt-2 space-y-1">
                            <li>üìä #workflow-success</li>
                            <li>üí∞ #payment-completed</li>
                            <li>üìß #email-sent</li>
                            <li>‚úÖ #data-processed</li>
                          </ul>
                        </div>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-3 rounded border-l-4 border-red-500`}>
                          <p className="font-medium text-red-600 dark:text-red-400">Alert Notifications</p>
                          <ul className="text-sm mt-2 space-y-1">
                            <li>üö® #workflow-errors</li>
                            <li>‚ö†Ô∏è #system-alerts</li>
                            <li>üîÑ #retry-notifications</li>
                            <li>üö´ #failed-processes</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üé® Step 2: Rich Embed Notifications</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Design Notification Templates:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`Discord Embed Notification Template:

Success Notification Example:
‚îå‚îÄ Discord Embed
‚îÇ  ‚îú‚îÄ Title: "‚úÖ Workflow Completed Successfully"
‚îÇ  ‚îú‚îÄ Color: Green (#00ff00)
‚îÇ  ‚îú‚îÄ Description: "Data processing workflow finished"
‚îÇ  ‚îú‚îÄ Fields:
‚îÇ  ‚îÇ   ‚îú‚îÄ Workflow: "customer-data-sync"
‚îÇ  ‚îÇ   ‚îú‚îÄ Duration: "2m 34s"
‚îÇ  ‚îÇ   ‚îú‚îÄ Records: "1,247 processed"
‚îÇ  ‚îÇ   ‚îî‚îÄ Next Run: "In 1 hour"
‚îÇ  ‚îú‚îÄ Thumbnail: Workflow icon/logo
‚îÇ  ‚îú‚îÄ Footer: "Automated by n8n ‚Ä¢ timestamp"
‚îÇ  ‚îî‚îÄ Actions: [View Details] [Schedule Next]

Error Notification Example:
‚îå‚îÄ Discord Embed  
‚îÇ  ‚îú‚îÄ Title: "‚ùå Workflow Error Detected"
‚îÇ  ‚îú‚îÄ Color: Red (#ff0000)
‚îÇ  ‚îú‚îÄ Description: "API connection failed"
‚îÇ  ‚îú‚îÄ Fields:
‚îÇ  ‚îÇ   ‚îú‚îÄ Workflow: "email-automation"
‚îÇ  ‚îÇ   ‚îú‚îÄ Error: "Connection timeout (5000ms)"
‚îÇ  ‚îÇ   ‚îú‚îÄ Node: "Gmail API Call"
‚îÇ  ‚îÇ   ‚îî‚îÄ Retry: "Automatic in 5 minutes"
‚îÇ  ‚îî‚îÄ Actions: [Retry Now] [View Logs] [Disable]`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">‚ö° Step 3: Smart Notification Filtering</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Implement Intelligent Filtering:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`n8n Notification Filter Logic:

‚îå‚îÄ Notification Filter Workflow
‚îÇ  ‚îú‚îÄ Input: Workflow execution data
‚îÇ  ‚îú‚îÄ Priority Assessment:
‚îÇ  ‚îÇ   ‚îú‚îÄ Critical: Immediate notification
‚îÇ  ‚îÇ   ‚îú‚îÄ High: 5-minute batch
‚îÇ  ‚îÇ   ‚îú‚îÄ Medium: Hourly summary
‚îÇ  ‚îÇ   ‚îî‚îÄ Low: Daily digest
‚îÇ  ‚îÇ
‚îÇ  ‚îú‚îÄ Frequency Control:
‚îÇ  ‚îÇ   ‚îú‚îÄ Rate limiting: Max 10/minute
‚îÇ  ‚îÇ   ‚îú‚îÄ Duplicate detection: 15-minute window
‚îÇ  ‚îÇ   ‚îî‚îÄ Quiet hours: 11pm - 7am
‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ Channel Routing:
‚îÇ      ‚îú‚îÄ Success ‚Üí #workflow-success
‚îÇ      ‚îú‚îÄ Errors ‚Üí #workflow-errors  
‚îÇ      ‚îú‚îÄ Admin alerts ‚Üí #admin-only
‚îÇ      ‚îî‚îÄ System status ‚Üí #status-updates`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîî Step 4: Interactive Notification Actions</h4>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded`}>
                        <p className="font-medium mb-2">Success Actions:</p>
                        <ul className="text-sm space-y-1">
                          <li>üîç View detailed execution log</li>
                          <li>üìä Open workflow dashboard</li>
                          <li>‚è≠Ô∏è Trigger next workflow</li>
                          <li>üìã Copy execution summary</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded`}>
                        <p className="font-medium mb-2">Error Actions:</p>
                        <ul className="text-sm space-y-1">
                          <li>üîÑ Retry failed execution</li>
                          <li>üõ†Ô∏è Edit workflow settings</li>
                          <li>‚è∏Ô∏è Pause workflow temporarily</li>
                          <li>üë• Notify team members</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Notification System Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Dedicated notification channels created</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Rich embed templates designed</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Smart filtering and rate limiting</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Interactive action buttons</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Channel permissions configured</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Notification testing completed</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced Discord features',
          steps: [
            {
              id: 'discord-step-5',
              title: 'Interactive Components',
              description: 'Create buttons and forms for agent control',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üéÆ Interactive Discord Components for n8n Workflow Control</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Build sophisticated interactive Discord interfaces using buttons, select menus, and modal forms 
                    that provide intuitive workflow control and real-time interaction with your n8n automation systems.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîò Step 1: Button Components for Workflow Control</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Design Interactive Button Layouts:</strong></p>
                      <p>Create dynamic button interfaces that adapt based on workflow states and user permissions.</p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`Discord Button Component Architecture:

Status Dashboard Example:
‚îå‚îÄ Workflow Status Embed
‚îÇ  ‚îú‚îÄ Title: "üìä Production Workflows Dashboard"
‚îÇ  ‚îú‚îÄ Description: Real-time n8n workflow monitoring
‚îÇ  ‚îî‚îÄ Action Rows:
‚îÇ      ‚îú‚îÄ Row 1: Primary Controls
‚îÇ      ‚îÇ   ‚îú‚îÄ [‚ñ∂Ô∏è Start All] - Start all workflows
‚îÇ      ‚îÇ   ‚îú‚îÄ [‚è∏Ô∏è Pause All] - Pause all workflows
‚îÇ      ‚îÇ   ‚îî‚îÄ [üîÑ Refresh] - Update status display
‚îÇ      ‚îÇ
‚îÇ      ‚îú‚îÄ Row 2: Individual Workflow Controls  
‚îÇ      ‚îÇ   ‚îú‚îÄ [üìß Email Bot] - Toggle email automation
‚îÇ      ‚îÇ   ‚îú‚îÄ [üí∞ Payment] - Toggle payment processing
‚îÇ      ‚îÇ   ‚îî‚îÄ [üìä Analytics] - Toggle data collection
‚îÇ      ‚îÇ
‚îÇ      ‚îî‚îÄ Row 3: Administrative
‚îÇ          ‚îú‚îÄ [üìã View Logs] - Open execution logs
‚îÇ          ‚îú‚îÄ [‚öôÔ∏è Settings] - Configuration panel
‚îÇ          ‚îî‚îÄ [üö® Alerts] - Alert management

Workflow-Specific Controls:
‚îå‚îÄ Individual Workflow Card
‚îÇ  ‚îú‚îÄ Status: üü¢ Running | üî¥ Stopped | üü° Warning
‚îÇ  ‚îú‚îÄ Last Run: "2 minutes ago"
‚îÇ  ‚îú‚îÄ Success Rate: "98.5%"
‚îÇ  ‚îî‚îÄ Actions:
‚îÇ      ‚îú‚îÄ [‚ñ∂Ô∏è/‚è∏Ô∏è] - Start/Stop toggle
‚îÇ      ‚îú‚îÄ [üîÑ] - Manual trigger
‚îÇ      ‚îú‚îÄ [‚öôÔ∏è] - Quick settings
‚îÇ      ‚îî‚îÄ [üìà] - Performance metrics`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Step 2: Select Menu & Dropdown Interfaces</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Advanced Selection Controls:</strong></p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-blue-500`}>
                          <p className="font-medium text-blue-600 dark:text-blue-400 mb-2">Workflow Selection Menu</p>
                          <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm font-mono`}>
                            {`Select Workflow to Monitor:
‚îî‚îÄ üìß Email Automation (Active)
‚îî‚îÄ üí∞ Payment Processing (Paused)  
‚îî‚îÄ üìä Data Analytics (Running)
‚îî‚îÄ üîî Notification System (Active)
‚îî‚îÄ üîÑ Backup Workflows (Scheduled)

[Select] [Cancel]`}
                          </div>
                        </div>
                        
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-green-500`}>
                          <p className="font-medium text-green-600 dark:text-green-400 mb-2">Action Selection Menu</p>
                          <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm font-mono`}>
                            {`Choose Action for "Email Automation":
‚îî‚îÄ ‚ñ∂Ô∏è Start Workflow
‚îî‚îÄ ‚è∏Ô∏è Pause Workflow
‚îî‚îÄ üîÑ Trigger Manual Run
‚îî‚îÄ ‚öôÔ∏è Modify Settings
‚îî‚îÄ üìã View Execution History
‚îî‚îÄ üóëÔ∏è Delete Workflow

[Execute] [Cancel]`}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìù Step 3: Modal Forms for Configuration</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Advanced Configuration Modals:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`n8n Workflow Configuration Modal:

‚îå‚îÄ Modal: "‚öôÔ∏è Configure Email Automation"
‚îÇ  ‚îú‚îÄ Title: "Email Workflow Settings"
‚îÇ  ‚îú‚îÄ Form Fields:
‚îÇ  ‚îÇ   ‚îú‚îÄ Schedule: [Dropdown] Every 15 minutes
‚îÇ  ‚îÇ   ‚îú‚îÄ Email Template: [Select] Welcome Series
‚îÇ  ‚îÇ   ‚îú‚îÄ Recipient List: [Text] subscribers@list.com
‚îÇ  ‚îÇ   ‚îú‚îÄ Send Limit: [Number] 100 per hour
‚îÇ  ‚îÇ   ‚îú‚îÄ Retry Count: [Number] 3 attempts
‚îÇ  ‚îÇ   ‚îî‚îÄ Priority: [Radio] Normal | High | Critical
‚îÇ  ‚îÇ
‚îÇ  ‚îú‚îÄ Advanced Options: [Checkbox] Show advanced
‚îÇ  ‚îÇ   ‚îú‚îÄ Custom Headers: [Text Area]
‚îÇ  ‚îÇ   ‚îú‚îÄ Webhook URL: [Text] https://...
‚îÇ  ‚îÇ   ‚îî‚îÄ Error Handler: [Select] Slack notification
‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ Actions:
‚îÇ      ‚îú‚îÄ [üíæ Save Changes] - Apply configuration
‚îÇ      ‚îú‚îÄ [üß™ Test Settings] - Validate setup
‚îÇ      ‚îî‚îÄ [‚ùå Cancel] - Discard changes

Modal Response Handling:
‚îå‚îÄ Form Submission Workflow
‚îÇ  ‚îú‚îÄ Validate input data
‚îÇ  ‚îú‚îÄ Update n8n workflow settings  
‚îÇ  ‚îú‚îÄ Test configuration changes
‚îÇ  ‚îú‚îÄ Send confirmation message
‚îÇ  ‚îî‚îÄ Update dashboard display`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîÑ Step 4: Real-time Component State Management</h4>
                    
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                        <p className="font-medium mb-2">Dynamic Button States:</p>
                        <ul className="text-sm space-y-1">
                          <li>‚Ä¢ ‚ñ∂Ô∏è ‚Üí ‚è∏Ô∏è Start/Stop button state synchronization</li>
                          <li>‚Ä¢ üîÑ Loading indicators during workflow execution</li>
                          <li>‚Ä¢ ‚ùå Disabled states for unauthorized actions</li>
                          <li>‚Ä¢ üîî Badge notifications for state changes</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                        <p className="font-medium mb-2">Component Interaction Flow:</p>
                        <ul className="text-sm space-y-1">
                          <li>‚Ä¢ Click button ‚Üí Show loading state ‚Üí Execute action</li>
                          <li>‚Ä¢ Update n8n ‚Üí Refresh component ‚Üí Show result</li>
                          <li>‚Ä¢ Error handling ‚Üí Show error state ‚Üí Retry option</li>
                          <li>‚Ä¢ Success confirmation ‚Üí Update UI ‚Üí Log action</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Interactive Components Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Button components for workflow control</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Select menus for option selection</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Modal forms for configuration</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Real-time state synchronization</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Error handling and validation</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>User experience testing completed</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'discord-step-6',
              title: 'Voice Integration',
              description: 'Integrate agent with Discord voice channels',
              estimated_time: '45 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üé§ Discord Voice Channel Integration with n8n Agents</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Create advanced voice-enabled Discord bots that can join voice channels, process audio commands, 
                    and provide audio feedback for n8n workflow automation with speech recognition and synthesis.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîä Step 1: Voice Channel Connection Setup</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Bot Voice Capabilities Configuration:</strong></p>
                      <p>Set up your Discord bot to join, manage, and interact with voice channels for workflow automation.</p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`Discord Voice Integration Architecture:

Bot Voice Permissions Required:
‚îå‚îÄ Voice Channel Permissions
‚îÇ  ‚îú‚îÄ Connect - Join voice channels
‚îÇ  ‚îú‚îÄ Speak - Play audio/TTS responses
‚îÇ  ‚îú‚îÄ Use Voice Activity - Voice commands
‚îÇ  ‚îú‚îÄ Priority Speaker - Override others when needed
‚îÇ  ‚îî‚îÄ Move Members - Manage users in channels

Voice Connection Workflow:
‚îå‚îÄ n8n Voice Bot Controller
‚îÇ  ‚îú‚îÄ Trigger: Voice command detected
‚îÇ  ‚îú‚îÄ Action: Join specified voice channel
‚îÇ  ‚îú‚îÄ Process: Audio stream analysis
‚îÇ  ‚îú‚îÄ Response: Execute workflow based on command
‚îÇ  ‚îî‚îÄ Feedback: Provide audio confirmation

Channel Management Commands:
‚îú‚îÄ /voice join [channel] - Bot joins voice channel
‚îú‚îÄ /voice leave - Bot disconnects from voice
‚îú‚îÄ /voice status - Show current voice status
‚îú‚îÄ /voice commands - List available voice commands
‚îî‚îÄ /voice settings - Configure voice behavior`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üéôÔ∏è Step 2: Speech Recognition & Voice Commands</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Voice Command Processing System:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`Voice Command Recognition Workflow:

Speech-to-Text Processing:
‚îå‚îÄ Audio Input Stream
‚îÇ  ‚îú‚îÄ Capture: Discord voice channel audio
‚îÇ  ‚îú‚îÄ Filter: Noise reduction and cleanup  
‚îÇ  ‚îú‚îÄ Convert: Audio to text (OpenAI Whisper)
‚îÇ  ‚îú‚îÄ Parse: Extract command and parameters
‚îÇ  ‚îî‚îÄ Execute: Trigger corresponding n8n workflow

Voice Command Examples:
‚îú‚îÄ "Agent, start email automation"
‚îÇ   ‚îî‚îÄ Triggers: Email workflow activation
‚îú‚îÄ "Agent, check payment status"  
‚îÇ   ‚îî‚îÄ Triggers: Payment system status check
‚îú‚îÄ "Agent, pause all workflows"
‚îÇ   ‚îî‚îÄ Triggers: Bulk workflow pause operation
‚îú‚îÄ "Agent, send daily report"
‚îÇ   ‚îî‚îÄ Triggers: Report generation and distribution
‚îî‚îÄ "Agent, show server statistics"
    ‚îî‚îÄ Triggers: System metrics collection

Command Processing Logic:
‚îå‚îÄ Voice Command Parser (n8n Function Node)
‚îÇ  ‚îú‚îÄ Wake Word Detection: "Agent" or "Hey N8N"
‚îÇ  ‚îú‚îÄ Intent Recognition: Classify command type
‚îÇ  ‚îú‚îÄ Parameter Extraction: Get workflow names/params
‚îÇ  ‚îú‚îÄ Permission Validation: Check user authorization
‚îÇ  ‚îú‚îÄ Workflow Execution: Trigger appropriate action
‚îÇ  ‚îî‚îÄ Response Generation: Prepare audio feedback`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üîä Step 3: Text-to-Speech Response System</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Dynamic Audio Response Generation:</strong></p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-blue-500`}>
                          <p className="font-medium text-blue-600 dark:text-blue-400 mb-2">Success Responses</p>
                          <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm`}>
                            <p>"Email automation has been started successfully. Currently processing 47 pending messages."</p>
                            <br />
                            <p>"Payment status check complete. All systems operational with 99.8% uptime."</p>
                          </div>
                        </div>
                        
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-red-500`}>
                          <p className="font-medium text-red-600 dark:text-red-400 mb-2">Error Responses</p>
                          <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm`}>
                            <p>"Sorry, I couldn't start the email workflow due to an API connection error. Please check the settings."</p>
                            <br />
                            <p>"I don't have permission to execute that command. Please contact an administrator."</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`TTS Response Generation Pipeline:

‚îå‚îÄ Response Builder (n8n Function)
‚îÇ  ‚îú‚îÄ Input: Workflow execution result
‚îÇ  ‚îú‚îÄ Template: Select appropriate response template
‚îÇ  ‚îú‚îÄ Personalization: Add user name and context
‚îÇ  ‚îú‚îÄ Data Integration: Include relevant metrics
‚îÇ  ‚îî‚îÄ Output: Formatted response text

‚îå‚îÄ Audio Generation (OpenAI TTS/ElevenLabs)
‚îÇ  ‚îú‚îÄ Text Input: Generated response text
‚îÇ  ‚îú‚îÄ Voice Selection: Professional/friendly tone
‚îÇ  ‚îú‚îÄ Speed & Pitch: Optimized for clarity
‚îÇ  ‚îú‚îÄ Format: High-quality audio for Discord
‚îÇ  ‚îî‚îÄ Delivery: Stream to voice channel

‚îå‚îÄ Audio Enhancement
‚îÇ  ‚îú‚îÄ Noise Gate: Clean audio output
‚îÇ  ‚îú‚îÄ Compression: Consistent volume levels
‚îÇ  ‚îú‚îÄ EQ: Clear speech frequencies
‚îÇ  ‚îî‚îÄ Limiting: Prevent audio clipping`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üéµ Step 4: Advanced Voice Features</h4>
                    
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                        <p className="font-medium mb-2">Smart Voice Controls:</p>
                        <ul className="text-sm space-y-1">
                          <li>‚Ä¢ üéØ Multi-user voice command queuing</li>
                          <li>‚Ä¢ üîá Automatic noise suppression and filtering</li>
                          <li>‚Ä¢ üìä Voice analytics and command success tracking</li>
                          <li>‚Ä¢ üîÑ Conversation context and command chaining</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                        <p className="font-medium mb-2">Audio Notification System:</p>
                        <ul className="text-sm space-y-1">
                          <li>‚Ä¢ üîî Workflow completion audio alerts</li>
                          <li>‚Ä¢ ‚ö†Ô∏è Error notifications with diagnostic information</li>
                          <li>‚Ä¢ üìà Scheduled status reports and summaries</li>
                          <li>‚Ä¢ üéº Custom audio themes for different workflow types</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`Advanced Voice Integration Features:

Voice Command Chains:
"Agent, start email automation, then run analytics, 
and notify me when both are complete"

Multi-Step Confirmations:
User: "Agent, delete all test workflows"
Bot: "This will delete 5 test workflows. Say 'confirm' to proceed"
User: "Confirm"
Bot: "Deletion completed. 5 workflows removed."

Voice-Activated Dashboard:
"Agent, give me the daily summary"
‚Üí Plays audio report with key metrics
‚Üí Optionally posts visual summary to text channel`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Voice Integration Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Voice channel connection and permissions</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Speech-to-text integration configured</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Voice command processing workflow</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Text-to-speech response system</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Audio quality optimization</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Voice commands tested with multiple users</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'discord-step-7',
              title: 'Server Management',
              description: 'Automate Discord server moderation with agents',
              estimated_time: '35 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h3 className="text-xl font-bold text-purple-800 dark:text-purple-200 mb-4">üõ°Ô∏è Automated Discord Server Management with n8n Agents</h3>
                  
                  <p className={`mb-4 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-700 dark:text-gray-300'}`}>
                    Build intelligent server management automation that handles moderation, user engagement, 
                    analytics, and community growth through sophisticated n8n workflows integrated with Discord.
                  </p>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-blue-50 dark:bg-blue-900/20'} p-4 rounded-lg mb-6`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üî® Step 1: Automated Moderation System</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Intelligent Content Moderation:</strong></p>
                      <p>Create a comprehensive moderation system that automatically handles rule violations and maintains community standards.</p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`Automated Moderation Workflow:

Message Monitoring Pipeline:
‚îå‚îÄ Discord Message Trigger
‚îÇ  ‚îú‚îÄ Capture: All server messages in real-time
‚îÇ  ‚îú‚îÄ Filter: Exclude bot messages and moderators  
‚îÇ  ‚îú‚îÄ Analyze: Content, links, attachments, user history
‚îÇ  ‚îî‚îÄ Route: To appropriate moderation workflow

Content Analysis System:
‚îå‚îÄ Multi-Layer Analysis (n8n Function Nodes)
‚îÇ  ‚îú‚îÄ Spam Detection: Repeated messages, rate limits
‚îÇ  ‚îú‚îÄ Toxicity Check: AI-powered sentiment analysis
‚îÇ  ‚îú‚îÄ Link Validation: Malicious URL detection
‚îÇ  ‚îú‚îÄ Image Scanning: NSFW and inappropriate content
‚îÇ  ‚îú‚îÄ Language Filter: Profanity and hate speech
‚îÇ  ‚îî‚îÄ Scam Detection: Phishing and fraud patterns

Automated Actions:
‚îú‚îÄ Level 1: Warning + Message deletion
‚îú‚îÄ Level 2: Temporary timeout (5-60 minutes)
‚îú‚îÄ Level 3: Role restrictions (24 hours)
‚îú‚îÄ Level 4: Temporary ban (1-7 days)
‚îî‚îÄ Level 5: Permanent ban + report to admins

Moderation Escalation:
‚îå‚îÄ Human Review Queue
‚îÇ  ‚îú‚îÄ Borderline cases ‚Üí Moderator review
‚îÇ  ‚îú‚îÄ Repeat offenders ‚Üí Admin notification
‚îÇ  ‚îú‚îÄ Severe violations ‚Üí Immediate escalation
‚îÇ  ‚îî‚îÄ Appeal system ‚Üí Structured review process`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üë• Step 2: Member Management & Onboarding</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Automated User Journey Management:</strong></p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-green-500`}>
                          <p className="font-medium text-green-600 dark:text-green-400 mb-2">New Member Workflow</p>
                          <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm`}>
                            <ul className="space-y-1">
                              <li>üéâ Welcome message with server rules</li>
                              <li>üéØ Automatic role assignment based on verification</li>
                              <li>üìö Guided tour of important channels</li>
                              <li>üí¨ Introduction prompt and ice-breakers</li>
                              <li>üìä Add to engagement tracking system</li>
                            </ul>
                          </div>
                        </div>
                        
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/50' : 'bg-white dark:bg-gray-700'} p-4 rounded border-l-4 border-blue-500`}>
                          <p className="font-medium text-blue-600 dark:text-blue-400 mb-2">Role Progression System</p>
                          <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-100 dark:bg-gray-800'} p-3 rounded text-sm`}>
                            <ul className="space-y-1">
                              <li>‚≠ê Activity-based role upgrades</li>
                              <li>üèÜ Achievement badges and recognition</li>
                              <li>üéñÔ∏è Contribution tracking and rewards</li>
                              <li>üìà Engagement metrics monitoring</li>
                              <li>üîÑ Automatic role adjustments</li>
                            </ul>
                          </div>
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm mt-4`}>
                        {`Member Lifecycle Management:

User Verification Process:
‚îå‚îÄ New Member Detection
‚îÇ  ‚îú‚îÄ Send welcome DM with verification instructions
‚îÇ  ‚îú‚îÄ Assign @Unverified role (limited channel access)
‚îÇ  ‚îú‚îÄ Start 24-hour verification timer
‚îÇ  ‚îî‚îÄ Monitor for verification completion

Verification Steps:
‚îú‚îÄ React to welcome message ‚úÖ
‚îú‚îÄ Read and accept server rules üìã
‚îú‚îÄ Complete profile (optional) üë§
‚îú‚îÄ Join introduction channel üí¨
‚îî‚îÄ Pass basic activity check (24h) ‚è∞

Post-Verification Actions:
‚îú‚îÄ Remove @Unverified role
‚îú‚îÄ Assign @Member role + channel access
‚îú‚îÄ Send server guide and resources
‚îú‚îÄ Add to activity tracking system
‚îî‚îÄ Enable reputation system participation

Engagement Automation:
‚îå‚îÄ Activity Monitoring
‚îÇ  ‚îú‚îÄ Message count and quality tracking
‚îÇ  ‚îú‚îÄ Voice channel participation
‚îÇ  ‚îú‚îÄ Reaction patterns and interactions
‚îÇ  ‚îú‚îÄ Helper behavior and support given
‚îÇ  ‚îî‚îÄ Event participation and attendance`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìä Step 3: Community Analytics & Insights</h4>
                    
                    <div className="space-y-3">
                      <p className="mb-2"><strong>1. Comprehensive Server Analytics Dashboard:</strong></p>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`Analytics Collection & Reporting:

Real-time Metrics Dashboard:
‚îå‚îÄ Member Statistics
‚îÇ  ‚îú‚îÄ Total Members: 1,247 (+12 this week)
‚îÇ  ‚îú‚îÄ Active Members: 834 (67% engagement)
‚îÇ  ‚îú‚îÄ New Joins: 23 (last 7 days)
‚îÇ  ‚îú‚îÄ Member Retention: 89% (30-day)
‚îÇ  ‚îî‚îÄ Top Contributors: @user1, @user2, @user3

Channel Activity Analysis:
‚îú‚îÄ Most Active Channels:
‚îÇ   ‚îú‚îÄ #general: 1,234 messages/week
‚îÇ   ‚îú‚îÄ #help: 456 messages/week
‚îÇ   ‚îî‚îÄ #announcements: 12 messages/week
‚îú‚îÄ Peak Activity Times:
‚îÇ   ‚îú‚îÄ Weekdays: 6-9 PM UTC
‚îÇ   ‚îî‚îÄ Weekends: 2-6 PM UTC
‚îî‚îÄ Engagement Trends:
    ‚îú‚îÄ Voice Chat: +15% this month
    ‚îú‚îÄ Reactions: +8% this month
    ‚îî‚îÄ Thread Creation: +22% this month

Automated Reports:
‚îå‚îÄ Daily Summary (sent to #staff-analytics)
‚îÇ  ‚îú‚îÄ Member count changes
‚îÇ  ‚îú‚îÄ Moderation actions taken
‚îÇ  ‚îú‚îÄ Top messages and interactions
‚îÇ  ‚îî‚îÄ Issues requiring attention

‚îå‚îÄ Weekly Deep Dive (sent to admins)
‚îÇ  ‚îú‚îÄ Growth rate analysis
‚îÇ  ‚îú‚îÄ Engagement pattern insights
‚îÇ  ‚îú‚îÄ Community health metrics
‚îÇ  ‚îî‚îÄ Recommendations for improvement`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-purple-50 dark:bg-purple-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üöÄ Step 4: Community Growth Automation</h4>
                    
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                          <p className="font-medium mb-2">Engagement Boosting:</p>
                          <ul className="text-sm space-y-1">
                            <li>üéØ Automated conversation starters</li>
                            <li>üé≤ Daily questions and polls</li>
                            <li>üèÜ Weekly challenges and contests</li>
                            <li>üìÖ Event scheduling and reminders</li>
                            <li>üéâ Member milestone celebrations</li>
                          </ul>
                        </div>
                        
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg`}>
                          <p className="font-medium mb-2">Content Management:</p>
                          <ul className="text-sm space-y-1">
                            <li>üìù Automated content posting schedule</li>
                            <li>üìö Resource sharing and curation</li>
                            <li>üîÑ Cross-posting from other platforms</li>
                            <li>üìä Content performance tracking</li>
                            <li>üí° AI-generated discussion topics</li>
                          </ul>
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-4 rounded-lg font-mono text-sm`}>
                        {`Community Growth Strategies:

Retention Optimization:
‚îå‚îÄ Member Engagement Workflow
‚îÇ  ‚îú‚îÄ Identify inactive members (7+ days)
‚îÇ  ‚îú‚îÄ Send personalized re-engagement DM
‚îÇ  ‚îú‚îÄ Suggest relevant channels and content
‚îÇ  ‚îú‚îÄ Invite to upcoming events
‚îÇ  ‚îî‚îÄ Track response and adjust approach

Community Events Automation:
‚îú‚îÄ Weekly events scheduling
‚îú‚îÄ Reminder notifications (24h, 1h, 15m)
‚îú‚îÄ Attendance tracking and follow-up
‚îú‚îÄ Event feedback collection
‚îî‚îÄ Success metrics and improvement suggestions

Recognition & Rewards System:
‚îå‚îÄ Achievement Tracking
‚îÇ  ‚îú‚îÄ Helpful member badges
‚îÇ  ‚îú‚îÄ Milestone celebrations (join anniversary)
‚îÇ  ‚îú‚îÄ Contribution leaderboards
‚îÇ  ‚îú‚îÄ Special role assignments
‚îÇ  ‚îî‚îÄ Community spotlight features`}
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-green-50 dark:bg-green-900/20'} p-4 rounded-lg`}>
                    <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-3">üìã Server Management Checklist</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Automated moderation system deployed</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Member onboarding workflow active</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Role progression system configured</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Analytics dashboard operational</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Community growth automation enabled</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" className="rounded" />
                        <span>Escalation procedures tested</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        }
      ]
    },
    openai: {
      id: 'openai',
      title: 'n8n + OpenAI Integration',
      icon: <Brain className="h-5 w-5" />,
      description: 'Connect n8n agents to OpenAI for AI capabilities',
      sections: [
        {
          id: 'foundation',
          title: 'üß† Foundation',
          description: 'Setup OpenAI integration',
          steps: [
            {
              id: 'openai-step-1',
              title: 'AI Agent Design',
              description: 'Design AI-powered agent workflows',
              estimated_time: '25 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>AI Agent Design</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>AI Agent Architecture</h3>
                    <div className="flex items-center justify-center space-x-4 mb-4">
                      <div className={`${theme === 'gradient' ? 'bg-green-600' : 'bg-green-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">1. Input</div>
                        <div className="text-xs">Receive data</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'text-gray-400' : 'text-gray-600'}`}>‚Üí</div>
                      <div className={`${theme === 'gradient' ? 'bg-blue-600' : 'bg-blue-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">2. AI Process</div>
                        <div className="text-xs">Smart analysis</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'text-gray-400' : 'text-gray-600'}`}>‚Üí</div>
                      <div className={`${theme === 'gradient' ? 'bg-purple-600' : 'bg-purple-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">3. Action</div>
                        <div className="text-xs">Execute tasks</div>
                      </div>
                    </div>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                      AI agents combine OpenAI's intelligence with n8n's automation power to create smart workflows that understand context and make decisions.
                    </p>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Core AI Capabilities</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Text Processing</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Natural language understanding</li>
                          <li>‚Ä¢ Content analysis</li>
                          <li>‚Ä¢ Sentiment detection</li>
                          <li>‚Ä¢ Language translation</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Decision Making</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Context-aware reasoning</li>
                          <li>‚Ä¢ Data-driven choices</li>
                          <li>‚Ä¢ Risk assessment</li>
                          <li>‚Ä¢ Priority evaluation</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Content Creation</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Generate text content</li>
                          <li>‚Ä¢ Create summaries</li>
                          <li>‚Ä¢ Write code snippets</li>
                          <li>‚Ä¢ Compose emails</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Agent Design Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>1. Content Analyzer Agent</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Analyzes incoming content for sentiment, topics, and key insights
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Webhook ‚Üí OpenAI Analysis ‚Üí Database ‚Üí Notifications
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>2. Smart Email Assistant</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Drafts personalized email responses based on context and tone
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Email Trigger ‚Üí AI Draft ‚Üí Human Review ‚Üí Send
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>3. Data Intelligence Agent</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Processes data and generates insights and recommendations
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Scheduled Trigger ‚Üí Data Fetch ‚Üí AI Analysis ‚Üí Report
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Getting Started</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Design Phase:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Define agent purpose</li>
                          <li>‚òê Map input/output</li>
                          <li>‚òê Choose OpenAI model</li>
                          <li>‚òê Design prompts</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Implementation:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Create n8n workflow</li>
                          <li>‚òê Add OpenAI nodes</li>
                          <li>‚òê Test with sample data</li>
                          <li>‚òê Deploy to production</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'openai-step-2',
              title: 'OpenAI API Setup',
              description: 'Configure OpenAI credentials and models',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>OpenAI API Setup</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>API Key Configuration</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Set up your OpenAI API credentials in n8n to enable AI-powered workflow automation with GPT models.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">1</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Get API Key</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">2</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Add to n8n</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">3</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Test Connection</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Step-by-Step Setup</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>1. Get Your OpenAI API Key</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Go to platform.openai.com</li>
                          <li>‚Ä¢ Sign in to your OpenAI account</li>
                          <li>‚Ä¢ Navigate to API Keys section</li>
                          <li>‚Ä¢ Click "Create new secret key"</li>
                          <li>‚Ä¢ Copy the key (save it securely)</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>2. Add Credentials to n8n</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Open n8n workflow editor</li>
                          <li>‚Ä¢ Go to Settings ‚Üí Credentials</li>
                          <li>‚Ä¢ Click "Add Credential"</li>
                          <li>‚Ä¢ Select "OpenAI API"</li>
                          <li>‚Ä¢ Paste your API key and save</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Model Selection Guide</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>GPT-4</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Most capable model for complex reasoning and analysis
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Best for: Complex analysis, coding, detailed content
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>GPT-3.5 Turbo</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Fast and cost-effective for most automation tasks
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Best for: Text processing, summaries, simple tasks
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Setup Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Account Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Create OpenAI account</li>
                          <li>‚òê Add payment method</li>
                          <li>‚òê Generate API key</li>
                          <li>‚òê Set usage limits</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">n8n Integration:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Add OpenAI credentials</li>
                          <li>‚òê Test connection</li>
                          <li>‚òê Choose default model</li>
                          <li>‚òê Create first workflow</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          ]
        },
        {
          id: 'processing',
          title: 'ü§ñ Processing',
          description: 'AI-powered agent operations',
          steps: [
            {
              id: 'openai-step-3',
              title: 'Text Generation',
              description: 'Generate text content with agent workflows',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Text Generation</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>AI Content Generation</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Generate high-quality text content automatically using OpenAI in your n8n workflows for blogs, emails, social media, and more.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üìù</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Blog Posts</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üìß</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Emails</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üì±</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Social Media</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Content Generation Workflows</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Blog Post Generator</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Automatically generate blog posts from topics, keywords, or research data
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Trigger ‚Üí Topic Research ‚Üí OpenAI Generate ‚Üí Format ‚Üí Publish
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Email Campaign Creator</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Generate personalized email content based on customer data and campaign goals
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Customer Data ‚Üí AI Personalization ‚Üí Email Template ‚Üí Send
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Prompt Engineering Tips</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Content Structure</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Define clear content type and purpose</li>
                          <li>‚Ä¢ Specify target audience and tone</li>
                          <li>‚Ä¢ Include key points or outline</li>
                          <li>‚Ä¢ Set word count or length requirements</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Quality Enhancement</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Add context and background information</li>
                          <li>‚Ä¢ Request specific formatting or style</li>
                          <li>‚Ä¢ Include examples of desired output</li>
                          <li>‚Ä¢ Ask for multiple variations to choose from</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Configure OpenAI node in workflow</li>
                          <li>‚òê Create content generation prompts</li>
                          <li>‚òê Set up input data sources</li>
                          <li>‚òê Define output formatting</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Optimization:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Test with sample content</li>
                          <li>‚òê Refine prompts for better results</li>
                          <li>‚òê Add quality control checks</li>
                          <li>‚òê Monitor generation costs</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'openai-step-4',
              title: 'Data Analysis',
              description: 'Analyze data using AI in agent workflows',
              estimated_time: '35 min',
              difficulty: 'Intermediate',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Data Analysis</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>AI-Powered Data Insights</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Leverage OpenAI to automatically analyze data, extract insights, and generate actionable reports from your business data.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üìä</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Data Insights</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üìà</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Trend Analysis</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üéØ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Recommendations</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Analysis Workflows</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Sales Data Analyzer</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Analyze sales trends, identify patterns, and generate insights for business decisions
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Sales Data ‚Üí AI Analysis ‚Üí Insights Report ‚Üí Action Items
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Customer Behavior Analysis</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Understand customer patterns and preferences to improve targeting and engagement
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          User Data ‚Üí Behavior Analysis ‚Üí Segmentation ‚Üí Personalization
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Analysis Types</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Descriptive Analysis</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Summarize historical data patterns</li>
                          <li>‚Ä¢ Identify key metrics and KPIs</li>
                          <li>‚Ä¢ Generate executive summaries</li>
                          <li>‚Ä¢ Create data narratives</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Predictive Insights</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Forecast future trends</li>
                          <li>‚Ä¢ Identify potential opportunities</li>
                          <li>‚Ä¢ Risk assessment and mitigation</li>
                          <li>‚Ä¢ Scenario planning recommendations</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Data Preparation:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Connect data sources</li>
                          <li>‚òê Clean and format data</li>
                          <li>‚òê Define analysis objectives</li>
                          <li>‚òê Set up data validation</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Analysis Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Configure OpenAI analysis prompts</li>
                          <li>‚òê Set up automated reporting</li>
                          <li>‚òê Test analysis accuracy</li>
                          <li>‚òê Schedule regular analysis runs</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          ]
        },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced AI features',
          steps: [
            {
              id: 'openai-step-5',
              title: 'Function Calling',
              description: 'Implement OpenAI function calling in agents',
              estimated_time: '45 min',
              difficulty: 'Advanced',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Function Calling</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Advanced OpenAI Function Calling</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Enable OpenAI to call external functions and APIs directly, creating intelligent agents that can take actions and interact with your systems.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üîß</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Function Calls</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Real Actions</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">ü§ñ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Smart Agents</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Function Call Examples</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Database Operations</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Allow AI to query, insert, or update database records based on natural language requests
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          User Request ‚Üí AI Analysis ‚Üí Function Call ‚Üí Database Action
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>API Integrations</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Connect AI to external APIs for weather, stock prices, or any third-party service
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          AI Decision ‚Üí API Call ‚Üí Data Processing ‚Üí Response
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Function Definition</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Function Schema</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Define function name and description</li>
                          <li>‚Ä¢ Specify required and optional parameters</li>
                          <li>‚Ä¢ Set parameter types and validation</li>
                          <li>‚Ä¢ Document expected return values</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Implementation Tips</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Keep functions focused and specific</li>
                          <li>‚Ä¢ Add proper error handling</li>
                          <li>‚Ä¢ Include validation for all inputs</li>
                          <li>‚Ä¢ Return structured data formats</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Security Considerations</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Access Control</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Validate all function parameters</li>
                          <li>‚Ä¢ Implement proper authentication</li>
                          <li>‚Ä¢ Limit function capabilities</li>
                          <li>‚Ä¢ Log all function calls</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Best Practices</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Use least privilege principle</li>
                          <li>‚Ä¢ Sanitize all inputs</li>
                          <li>‚Ä¢ Monitor function usage</li>
                          <li>‚Ä¢ Set rate limits and quotas</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Function Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Define function schemas</li>
                          <li>‚òê Implement function logic</li>
                          <li>‚òê Add error handling</li>
                          <li>‚òê Test function calls</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Integration:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Configure OpenAI function calling</li>
                          <li>‚òê Set up security measures</li>
                          <li>‚òê Monitor function performance</li>
                          <li>‚òê Document function usage</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'openai-step-6',
              title: 'Agent Conversations',
              description: 'Create conversational AI agents',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Agent Conversations</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Conversational AI Agents</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Build intelligent conversational agents that maintain context, remember previous interactions, and provide natural, human-like responses.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üí¨</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Natural Chat</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üß†</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Context Memory</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üéØ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Goal-Oriented</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Conversation Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Customer Support Agent</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Handle support tickets with context-aware responses and escalation capabilities
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          User Query ‚Üí Context Check ‚Üí AI Response ‚Üí Action/Escalation
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Sales Assistant Agent</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Guide prospects through the sales process with personalized recommendations
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Lead Info ‚Üí Qualification ‚Üí Product Match ‚Üí Proposal ‚Üí Follow-up
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Context Management</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Conversation Memory</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Store conversation history in database</li>
                          <li>‚Ä¢ Track user preferences and context</li>
                          <li>‚Ä¢ Maintain session state across interactions</li>
                          <li>‚Ä¢ Reference previous conversations</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Personality Design</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Define agent personality and tone</li>
                          <li>‚Ä¢ Set response style and vocabulary</li>
                          <li>‚Ä¢ Create consistent brand voice</li>
                          <li>‚Ä¢ Add humor or professional tone</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Advanced Features</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Multi-turn Conversations</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Handle complex multi-step dialogs</li>
                          <li>‚Ä¢ Ask clarifying questions</li>
                          <li>‚Ä¢ Guide users through processes</li>
                          <li>‚Ä¢ Maintain conversation flow</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Intent Recognition</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Identify user goals and intents</li>
                          <li>‚Ä¢ Route to appropriate workflows</li>
                          <li>‚Ä¢ Handle multiple intents per message</li>
                          <li>‚Ä¢ Escalate when needed</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Conversation Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Design conversation flows</li>
                          <li>‚òê Set up context storage</li>
                          <li>‚òê Define agent personality</li>
                          <li>‚òê Create response templates</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Enhancement:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Add intent recognition</li>
                          <li>‚òê Implement escalation rules</li>
                          <li>‚òê Test conversation quality</li>
                          <li>‚òê Monitor agent performance</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'openai-step-7',
              title: 'Custom Models',
              description: 'Fine-tune models for specific agent tasks',
              estimated_time: '50 min',
              difficulty: 'Advanced',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Custom Models</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Custom AI Model Integration</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Fine-tune and deploy custom OpenAI models for specialized use cases, or integrate with other AI providers for diverse capabilities.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üî¨</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Fine-tuning</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">‚öôÔ∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Custom Models</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Multi-Provider</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Fine-tuning Process</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Preparation</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Prepare high-quality training data specific to your domain and use case
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Raw Data ‚Üí Cleaning ‚Üí Formatting ‚Üí Validation ‚Üí Upload
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Model Training</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Configure training parameters and monitor the fine-tuning process
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Base Model ‚Üí Training Job ‚Üí Validation ‚Üí Custom Model
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Use Cases</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Domain-Specific Models</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Medical/Healthcare AI assistants</li>
                          <li>‚Ä¢ Legal document analysis</li>
                          <li>‚Ä¢ Financial report generation</li>
                          <li>‚Ä¢ Technical documentation writing</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Brand-Specific Training</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Company-specific tone and voice</li>
                          <li>‚Ä¢ Product knowledge integration</li>
                          <li>‚Ä¢ Internal process automation</li>
                          <li>‚Ä¢ Customer service optimization</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Alternative AI Providers</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Provider Options</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Anthropic Claude for reasoning</li>
                          <li>‚Ä¢ Google PaLM for efficiency</li>
                          <li>‚Ä¢ Cohere for embeddings</li>
                          <li>‚Ä¢ Hugging Face open models</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Integration Benefits</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Cost optimization strategies</li>
                          <li>‚Ä¢ Redundancy and reliability</li>
                          <li>‚Ä¢ Specialized model capabilities</li>
                          <li>‚Ä¢ Performance comparison</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Model Development:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Collect training data</li>
                          <li>‚òê Prepare data format</li>
                          <li>‚òê Configure fine-tuning job</li>
                          <li>‚òê Validate model performance</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Deployment:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Deploy custom model</li>
                          <li>‚òê Test model integration</li>
                          <li>‚òê Monitor model performance</li>
                          <li>‚òê Set up model versioning</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          ]
        }
      ]
    },
    zapier: {
      id: 'zapier',
      title: 'n8n + Zapier Integration',
      icon: <Zap className="h-5 w-5" />,
      description: 'Connect n8n agents to Zapier for workflow automation',
      sections: [
        {
          id: 'foundation',
          title: '‚ö° Foundation',
          description: 'Setup Zapier integration',
          steps: [
            {
              id: 'zapier-step-1',
              title: 'Agent-Zapier Bridge',
              description: 'Design bridge between n8n agents and Zapier',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Agent-Zapier Bridge</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>n8n-Zapier Integration Bridge</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Connect your n8n AI agents with Zapier's 5000+ app ecosystem, enabling seamless data flow between platforms and automated workflows.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üåâ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Bridge Connection</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Real-time Sync</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Bi-directional</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Integration Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>CRM Data Sync</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Automatically sync lead data between n8n AI analysis and CRM systems like Salesforce, HubSpot
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          n8n Lead Analysis ‚Üí Zapier ‚Üí CRM Update ‚Üí Follow-up Actions
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Social Media Automation</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Generate content in n8n and automatically post to social platforms via Zapier connections
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          AI Content Creation ‚Üí Zapier ‚Üí Multi-Platform Posting ‚Üí Analytics
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Bridge Configuration</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>API Keys Setup</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Generate n8n webhook URLs</li>
                          <li>‚Ä¢ Configure Zapier API connections</li>
                          <li>‚Ä¢ Set up authentication tokens</li>
                          <li>‚Ä¢ Test connection stability</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Mapping</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Map n8n output fields to Zapier inputs</li>
                          <li>‚Ä¢ Handle data type conversions</li>
                          <li>‚Ä¢ Set up error handling and retries</li>
                          <li>‚Ä¢ Configure data validation rules</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Bridge Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Create n8n webhook endpoints</li>
                          <li>‚òê Set up Zapier zap triggers</li>
                          <li>‚òê Configure authentication</li>
                          <li>‚òê Map data fields</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Testing:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Test data flow both directions</li>
                          <li>‚òê Verify error handling</li>
                          <li>‚òê Monitor performance</li>
                          <li>‚òê Document integration process</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'zapier-step-2',
              title: 'Zapier Webhooks',
              description: 'Setup webhooks for Zapier integration',
              estimated_time: '25 min',
              difficulty: 'Beginner',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Zapier Webhooks</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Webhook Communication Setup</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Configure secure webhook connections between n8n and Zapier for instant data transmission and real-time automation triggers.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üîó</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Webhook URLs</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üîí</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Secure Transfer</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Instant Triggers</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Webhook Configuration</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>n8n Webhook Setup</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Create webhook nodes in n8n to receive data from Zapier and trigger automated workflows
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Add Webhook Node ‚Üí Configure URL ‚Üí Set Method ‚Üí Test Connection
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Zapier Webhook Actions</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Set up Zapier webhooks to send data to n8n endpoints when specific triggers occur
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Trigger Event ‚Üí Format Data ‚Üí Send Webhook ‚Üí n8n Processing
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Webhook Security</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Authentication Methods</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ API key authentication</li>
                          <li>‚Ä¢ Webhook signature verification</li>
                          <li>‚Ä¢ IP address whitelisting</li>
                          <li>‚Ä¢ HTTPS encryption enforcement</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Validation</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Payload structure validation</li>
                          <li>‚Ä¢ Data type checking</li>
                          <li>‚Ä¢ Required field verification</li>
                          <li>‚Ä¢ Malformed data handling</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Testing & Debugging</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Testing Tools</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Use webhook.site for testing</li>
                          <li>‚Ä¢ Postman for manual testing</li>
                          <li>‚Ä¢ n8n webhook test button</li>
                          <li>‚Ä¢ Zapier webhook logs</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Common Issues</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Timeout errors and retries</li>
                          <li>‚Ä¢ Data format mismatches</li>
                          <li>‚Ä¢ Authentication failures</li>
                          <li>‚Ä¢ Rate limiting issues</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Webhook Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Create webhook URLs in n8n</li>
                          <li>‚òê Configure Zapier webhook actions</li>
                          <li>‚òê Set up authentication</li>
                          <li>‚òê Test webhook connectivity</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Security & Monitoring:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Implement security measures</li>
                          <li>‚òê Set up error handling</li>
                          <li>‚òê Monitor webhook performance</li>
                          <li>‚òê Document webhook endpoints</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          ]
        },
        {
          id: 'automation',
          title: 'üîÑ Automation',
          description: 'Cross-platform automation',
          steps: [
            {
              id: 'zapier-step-3',
              title: 'Trigger Zapier from Agents',
              description: 'Send agent data to trigger Zapier workflows',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Trigger Zapier</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Outbound Zapier Triggers</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Send data from n8n workflows to trigger Zapier automations, enabling your AI agents to initiate actions across thousands of connected apps.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üöÄ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Outbound Triggers</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üì§</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Data Push</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Chain Automation</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Trigger Scenarios</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Lead Qualification Complete</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          When n8n AI completes lead analysis, trigger Zapier to update CRM and notify sales team
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          AI Analysis Complete ‚Üí n8n HTTP Request ‚Üí Zapier Trigger ‚Üí CRM + Slack
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Content Generation Ready</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          After AI content creation, trigger social media posting and email campaign workflows
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Content Generated ‚Üí Format Data ‚Üí Zapier Trigger ‚Üí Social + Email
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>HTTP Request Configuration</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Request Setup</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Use HTTP Request node in n8n</li>
                          <li>‚Ä¢ Set method to POST</li>
                          <li>‚Ä¢ Add Zapier webhook URL</li>
                          <li>‚Ä¢ Configure headers and authentication</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Formatting</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Structure payload as JSON</li>
                          <li>‚Ä¢ Map n8n variables to Zapier fields</li>
                          <li>‚Ä¢ Include timestamp and metadata</li>
                          <li>‚Ä¢ Add error context information</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Trigger Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Add HTTP Request node</li>
                          <li>‚òê Configure Zapier webhook URL</li>
                          <li>‚òê Set up data payload</li>
                          <li>‚òê Test trigger connection</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Monitoring:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Monitor trigger success rates</li>
                          <li>‚òê Set up error notifications</li>
                          <li>‚òê Log trigger events</li>
                          <li>‚òê Track downstream actions</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'zapier-step-4',
              title: 'Receive from Zapier',
              description: 'Handle data from Zapier in agent workflows',
              estimated_time: '25 min',
              difficulty: 'Intermediate',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Receive from Zapier</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Inbound Data Processing</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Configure n8n to receive and process data from Zapier workflows, enabling your AI agents to respond to external events and triggers.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üì•</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Inbound Data</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">‚öôÔ∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Auto Processing</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üéØ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Smart Routing</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Reception Workflows</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Form Submission Processing</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Receive form data from Zapier and automatically process with AI for lead qualification or support
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Form Submit ‚Üí Zapier ‚Üí n8n Webhook ‚Üí AI Analysis ‚Üí CRM Update
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Social Media Mentions</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Monitor social mentions via Zapier and trigger AI sentiment analysis and response workflows
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Social Mention ‚Üí Zapier ‚Üí n8n ‚Üí Sentiment AI ‚Üí Response Generation
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Data Processing</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Transformation</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Parse incoming JSON payloads</li>
                          <li>‚Ä¢ Extract relevant data fields</li>
                          <li>‚Ä¢ Transform data formats as needed</li>
                          <li>‚Ä¢ Validate data integrity</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Routing Logic</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Route data based on content type</li>
                          <li>‚Ä¢ Apply conditional logic for processing</li>
                          <li>‚Ä¢ Handle different data sources</li>
                          <li>‚Ä¢ Implement fallback mechanisms</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Error Handling</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Error Detection</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Invalid data format detection</li>
                          <li>‚Ä¢ Missing required fields checking</li>
                          <li>‚Ä¢ Processing timeout handling</li>
                          <li>‚Ä¢ API connection failures</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Recovery Actions</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Retry failed operations</li>
                          <li>‚Ä¢ Send error notifications</li>
                          <li>‚Ä¢ Log errors for debugging</li>
                          <li>‚Ä¢ Fallback to manual processing</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Webhook Reception:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Set up webhook endpoints</li>
                          <li>‚òê Configure data parsing</li>
                          <li>‚òê Implement routing logic</li>
                          <li>‚òê Test data reception</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Processing & Monitoring:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Add error handling</li>
                          <li>‚òê Set up monitoring</li>
                          <li>‚òê Create response workflows</li>
                          <li>‚òê Document data flows</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          ]
        },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced cross-platform features',
          steps: [
            {
              id: 'zapier-step-5',
              title: 'Complex Workflows',
              description: 'Create complex multi-platform workflows',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Complex Workflows</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Multi-Platform Automation Orchestration</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Build sophisticated workflows that span across n8n AI agents and Zapier's ecosystem, creating powerful automation chains with conditional logic and parallel processing.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Complex Logic</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Parallel Processing</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üåê</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Multi-Platform</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Advanced Workflow Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Multi-Stage Lead Processing</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Complex lead qualification workflow with AI analysis, scoring, routing, and multi-channel follow-up
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Lead ‚Üí AI Score ‚Üí Branch Logic ‚Üí CRM + Email + Slack + Calendar
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Content Distribution Pipeline</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          AI content creation with automatic formatting, approval workflow, and multi-platform publishing
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          AI Content ‚Üí Approval ‚Üí Format ‚Üí Social + Blog + Email + Analytics
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Conditional Logic & Branching</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Decision Trees</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ AI-powered decision making</li>
                          <li>‚Ä¢ Multi-condition branching logic</li>
                          <li>‚Ä¢ Dynamic routing based on data</li>
                          <li>‚Ä¢ Fallback and error paths</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Parallel Execution</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Simultaneous multi-platform actions</li>
                          <li>‚Ä¢ Race conditions and synchronization</li>
                          <li>‚Ä¢ Merge results from parallel branches</li>
                          <li>‚Ä¢ Timeout and completion handling</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Workflow Optimization</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Performance Strategies</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Minimize API calls with batching</li>
                          <li>‚Ä¢ Use webhooks for real-time triggers</li>
                          <li>‚Ä¢ Implement smart caching strategies</li>
                          <li>‚Ä¢ Optimize data transformation steps</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Scalability Patterns</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Queue systems for high volume</li>
                          <li>‚Ä¢ Rate limiting and throttling</li>
                          <li>‚Ä¢ Load balancing across instances</li>
                          <li>‚Ä¢ Resource monitoring and alerting</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Workflow Design:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Map out complex workflow logic</li>
                          <li>‚òê Design conditional branches</li>
                          <li>‚òê Plan parallel execution paths</li>
                          <li>‚òê Define error handling flows</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Optimization:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Implement performance monitoring</li>
                          <li>‚òê Test complex scenarios</li>
                          <li>‚òê Optimize resource usage</li>
                          <li>‚òê Document workflow architecture</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'zapier-step-6',
              title: 'Error Handling',
              description: 'Handle errors across n8n and Zapier',
              estimated_time: '35 min',
              difficulty: 'Advanced',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Error Handling</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Cross-Platform Error Management</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Implement robust error handling across n8n and Zapier integrations with graceful degradation, automated recovery, and comprehensive monitoring.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">‚ö†Ô∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Error Detection</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Auto Recovery</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üìä</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Monitoring</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Error Types & Detection</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Connection Failures</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Handle API timeouts, network issues, and service outages with intelligent retry mechanisms
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Timeout ‚Üí Exponential Backoff ‚Üí Retry ‚Üí Fallback ‚Üí Alert
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Validation Errors</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Catch malformed data, missing fields, and type mismatches before they break workflows
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Validation ‚Üí Error Log ‚Üí Data Cleanup ‚Üí Retry/Skip
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Recovery Strategies</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Retry Mechanisms</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Exponential backoff with jitter</li>
                          <li>‚Ä¢ Maximum retry limits per operation</li>
                          <li>‚Ä¢ Different retry strategies per error type</li>
                          <li>‚Ä¢ Circuit breaker patterns</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Graceful Degradation</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Fallback to alternative services</li>
                          <li>‚Ä¢ Partial workflow completion</li>
                          <li>‚Ä¢ Queue failed operations for later</li>
                          <li>‚Ä¢ Manual intervention workflows</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Monitoring & Alerting</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Error Tracking</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Centralized error logging</li>
                          <li>‚Ä¢ Error categorization and trends</li>
                          <li>‚Ä¢ Performance impact analysis</li>
                          <li>‚Ä¢ Root cause identification</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Alert Systems</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Real-time error notifications</li>
                          <li>‚Ä¢ Severity-based escalation</li>
                          <li>‚Ä¢ Team assignment and routing</li>
                          <li>‚Ä¢ Integration with monitoring tools</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-red-50 dark:bg-red-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-red-200 dark:border-red-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-red-600 dark:text-red-400 mb-4`}>Best Practices</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Prevention</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Input validation at all entry points</li>
                          <li>‚Ä¢ Rate limiting and throttling</li>
                          <li>‚Ä¢ Health checks and monitoring</li>
                          <li>‚Ä¢ Comprehensive testing strategies</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Documentation</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Error handling procedures</li>
                          <li>‚Ä¢ Troubleshooting guides</li>
                          <li>‚Ä¢ Recovery time objectives</li>
                          <li>‚Ä¢ Post-incident analysis</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Error Handling Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Implement error detection</li>
                          <li>‚òê Configure retry mechanisms</li>
                          <li>‚òê Set up fallback strategies</li>
                          <li>‚òê Create error logging system</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Monitoring & Recovery:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Configure monitoring dashboards</li>
                          <li>‚òê Set up alert notifications</li>
                          <li>‚òê Test recovery procedures</li>
                          <li>‚òê Document error responses</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            },
            {
              id: 'zapier-step-7',
              title: 'Performance Optimization',
              description: 'Optimize performance across platforms',
              estimated_time: '30 min',
              difficulty: 'Advanced',
              content: <div className={theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}>
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Performance Optimization</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Cross-Platform Performance Optimization</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Optimize performance across n8n and Zapier integrations with smart caching, efficient data flow, and resource management for maximum speed and reliability.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Speed Optimization</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üíæ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Resource Efficiency</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üìä</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Monitoring</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Performance Strategies</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>API Call Optimization</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Reduce API calls through batching, caching, and intelligent request scheduling
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Batch Requests ‚Üí Cache Results ‚Üí Smart Scheduling ‚Üí Rate Limiting
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Data Flow Optimization</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Streamline data transformation and minimize payload sizes across platforms
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Compress Data ‚Üí Selective Fields ‚Üí Efficient Parsing ‚Üí Stream Processing
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Caching & Memory Management</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Smart Caching</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Multi-level caching strategies</li>
                          <li>‚Ä¢ Time-based cache invalidation</li>
                          <li>‚Ä¢ Context-aware cache keys</li>
                          <li>‚Ä¢ Cache hit rate optimization</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Memory Efficiency</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Stream processing for large datasets</li>
                          <li>‚Ä¢ Memory pool management</li>
                          <li>‚Ä¢ Garbage collection optimization</li>
                          <li>‚Ä¢ Resource cleanup automation</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Scalability Patterns</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Horizontal Scaling</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Load balancing across instances</li>
                          <li>‚Ä¢ Distributed workflow execution</li>
                          <li>‚Ä¢ Auto-scaling based on demand</li>
                          <li>‚Ä¢ Resource allocation optimization</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Queue Management</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Priority-based task queuing</li>
                          <li>‚Ä¢ Dead letter queue handling</li>
                          <li>‚Ä¢ Queue size monitoring</li>
                          <li>‚Ä¢ Backpressure management</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-orange-50 dark:bg-orange-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-orange-200 dark:border-orange-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-orange-600 dark:text-orange-400 mb-4`}>Performance Monitoring</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Metrics Collection</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Response time tracking</li>
                          <li>‚Ä¢ Throughput measurements</li>
                          <li>‚Ä¢ Resource utilization monitoring</li>
                          <li>‚Ä¢ Error rate analysis</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Performance Alerts</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Threshold-based alerting</li>
                          <li>‚Ä¢ Performance degradation detection</li>
                          <li>‚Ä¢ Capacity planning insights</li>
                          <li>‚Ä¢ Automated optimization triggers</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Performance Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Implement caching strategies</li>
                          <li>‚òê Optimize API call patterns</li>
                          <li>‚òê Set up resource monitoring</li>
                          <li>‚òê Configure scaling policies</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Monitoring & Optimization:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Deploy performance monitoring</li>
                          <li>‚òê Set up alerting thresholds</li>
                          <li>‚òê Test under load conditions</li>
                          <li>‚òê Document optimization results</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          ]
        }
      ]
    },
    make: {
      id: 'make',
      title: 'n8n + Make Integration',
      icon: <RefreshCw className="h-5 w-5" />,
      description: 'Connect n8n agents to Make (formerly Integromat)',
      sections: [
        {
          id: 'foundation',
          title: 'üîÑ Foundation',
          description: 'Setup Make integration',
          steps: [
            {
              id: 'make-step-1',
              title: 'Agent-Make Design',
              description: 'Design integration between n8n agents and Make',
              estimated_time: '25 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Agent-Make Integration Design</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>üîÑ n8n + Make Integration Architecture</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Design a powerful integration between n8n AI agents and Make (formerly Integromat) to leverage both platforms' 
                      strengths - n8n's flexible workflow automation with Make's extensive app ecosystem and visual automation tools.
                    </p>
                    
                    <div className="flex items-center justify-center space-x-4 mb-4">
                      <div className={`${theme === 'gradient' ? 'bg-green-600' : 'bg-green-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">n8n Agents</div>
                        <div className="text-xs">Smart Processing</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'text-gray-400' : 'text-gray-600'}`}>‚áÑ</div>
                      <div className={`${theme === 'gradient' ? 'bg-purple-600' : 'bg-purple-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">Make Scenarios</div>
                        <div className="text-xs">App Ecosystem</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Integration Patterns</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>üöÄ Trigger Pattern</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          n8n agents trigger Make scenarios for complex app integrations
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          n8n Processing ‚Üí Webhook ‚Üí Make Scenario ‚Üí App Actions
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>üì• Data Sync Pattern</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Bi-directional data synchronization between platforms
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Make Data Collection ‚Üí HTTP ‚Üí n8n Analysis ‚Üí Results Back
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Use Case Examples</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>E-commerce Order Processing</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Make collects orders from multiple channels, n8n analyzes for fraud/priority, Make fulfills via appropriate channels
                        </p>
                        <ul className={`text-xs ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-500 dark:text-gray-400'} list-disc list-inside`}>
                          <li>Make: Shopify + WooCommerce + Amazon order collection</li>
                          <li>n8n: AI fraud detection + priority scoring + inventory check</li>
                          <li>Make: Fulfill via ShipStation + send notifications via Klaviyo</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Lead Qualification Pipeline</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Make captures leads from multiple sources, n8n scores and enriches, Make routes to appropriate sales tools
                        </p>
                        <ul className={`text-xs ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-500 dark:text-gray-400'} list-disc list-inside`}>
                          <li>Make: Lead capture from forms + LinkedIn + cold outreach</li>
                          <li>n8n: AI scoring + data enrichment + qualification</li>
                          <li>Make: Route to HubSpot/Salesforce + trigger follow-up sequences</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Design Planning Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Architecture Design:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Map data flow between platforms</li>
                          <li>‚òê Identify trigger points and patterns</li>
                          <li>‚òê Plan error handling and fallbacks</li>
                          <li>‚òê Design authentication strategy</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Integration Points:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Define webhook endpoints</li>
                          <li>‚òê Plan data transformation needs</li>
                          <li>‚òê Set up monitoring and logging</li>
                          <li>‚òê Document integration dependencies</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'make-step-2',
              title: 'Make API Setup',
              description: 'Configure Make API connection',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Make API Setup & Configuration</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>üîë Make API Connection Setup</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Configure secure API connections between n8n and Make to enable seamless data exchange and workflow automation 
                      across both platforms using HTTP modules and webhook integrations.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üîê</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">API Keys</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üîó</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">HTTP Modules</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üéØ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Webhooks</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Step-by-Step API Configuration</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>1. Make Account & API Access</h4>
                        <ul className={`text-sm space-y-2 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Sign up for Make account at <span className="font-mono bg-gray-100 dark:bg-gray-700 px-1 rounded">make.com</span></li>
                          <li>‚Ä¢ Navigate to Profile Settings ‚Üí API</li>
                          <li>‚Ä¢ Generate API token for n8n integration</li>
                          <li>‚Ä¢ Note your organization ID for API calls</li>
                          <li>‚Ä¢ Set up webhook URLs for incoming triggers</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>2. n8n HTTP Request Configuration</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`n8n HTTP Request Node Setup:

URL: https://hook.make.com/[your-webhook-id]
Method: POST
Headers:
  Content-Type: application/json
  Authorization: Bearer [your-api-token]

Body (JSON):
{
  "trigger": "n8n_agent_execution",
  "data": "{{ $json }}",
  "timestamp": "{{ new Date().toISOString() }}",
  "agent_id": "{{ $node['Agent ID'].json.id }}"
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Make Scenario Configuration</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>HTTP Module Setup in Make</h4>
                        <ul className={`text-sm space-y-2 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Trigger:</strong> Webhooks ‚Üí Custom webhook</li>
                          <li>‚Ä¢ <strong>URL:</strong> Copy webhook URL to n8n</li>
                          <li>‚Ä¢ <strong>Data Structure:</strong> JSON with agent data</li>
                          <li>‚Ä¢ <strong>Filters:</strong> Add conditions for specific triggers</li>
                          <li>‚Ä¢ <strong>Actions:</strong> Connect to target applications</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>Reverse Integration (Make ‚Üí n8n)</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Make HTTP Module Configuration:

URL: https://[your-n8n-instance]/webhook/make-trigger
Method: POST
Headers:
  Content-Type: application/json
  X-Make-Source: webhook

Body:
{
  "scenario_id": "{{scenario.id}}",
  "execution_id": "{{execution.id}}",
  "data": {{bundle}},
  "timestamp": "{{now}}"
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Authentication & Security</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Security Best Practices</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Store API tokens in environment variables</li>
                          <li>‚Ä¢ Use HTTPS for all API communications</li>
                          <li>‚Ä¢ Implement webhook signature verification</li>
                          <li>‚Ä¢ Set up IP whitelist restrictions</li>
                          <li>‚Ä¢ Regularly rotate API tokens</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Rate Limiting</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Make API: 60 requests/minute</li>
                          <li>‚Ä¢ Implement exponential backoff</li>
                          <li>‚Ä¢ Queue requests during high volume</li>
                          <li>‚Ä¢ Monitor API usage in dashboards</li>
                          <li>‚Ä¢ Set up alerts for rate limit approaching</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Testing & Validation</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Connection Testing:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Test n8n ‚Üí Make webhook delivery</li>
                          <li>‚òê Verify Make ‚Üí n8n response handling</li>
                          <li>‚òê Check authentication token validity</li>
                          <li>‚òê Validate data format compatibility</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Error Handling:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Configure retry mechanisms</li>
                          <li>‚òê Set up error logging and alerts</li>
                          <li>‚òê Test timeout scenarios</li>
                          <li>‚òê Implement graceful degradation</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'scenarios',
          title: 'üéØ Scenarios',
          description: 'Make scenario integration',
          steps: [
            {
              id: 'make-step-3',
              title: 'Trigger Make Scenarios',
              description: 'Trigger Make scenarios from n8n agents',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Trigger Make Scenarios from n8n</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>üöÄ Automated Scenario Triggering</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Set up intelligent triggers that activate Make scenarios based on n8n agent processing results, enabling 
                      complex multi-platform workflows that leverage both systems' capabilities.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Event-Driven Triggers</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Agent processing completion</li>
                          <li>‚Ä¢ Specific data conditions met</li>
                          <li>‚Ä¢ Error threshold exceeded</li>
                          <li>‚Ä¢ Schedule-based activation</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Conditional Logic</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Data value thresholds</li>
                          <li>‚Ä¢ Agent execution status</li>
                          <li>‚Ä¢ Time-based conditions</li>
                          <li>‚Ä¢ Multi-factor decision trees</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>n8n Trigger Configuration</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>HTTP Request Node Setup</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`// n8n Workflow: Trigger Make Scenario
If Node: Check conditions
  ‚îú‚îÄ condition: {{ $node["Agent Processing"].json.success === true }}
  ‚îî‚îÄ condition: {{ $node["Agent Processing"].json.confidence > 0.8 }}

HTTP Request Node:
  URL: https://hook.make.com/[scenario-webhook-id]
  Method: POST
  Headers:
    Content-Type: application/json
    X-Trigger-Source: n8n-agent

  Body:
  {
    "trigger_type": "agent_completion",
    "agent_data": "{{ $node['Agent Processing'].json }}",
    "metadata": {
      "workflow_id": "{{ $workflow.id }}",
      "execution_id": "{{ $execution.id }}",
      "timestamp": "{{ new Date().toISOString() }}"
    }
  }`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Make Scenario Response Handling</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>Response Processing in n8n</h4>
                        <ul className={`text-sm space-y-2 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Success Response:</strong> Continue workflow with Make data</li>
                          <li>‚Ä¢ <strong>Error Response:</strong> Trigger fallback scenario</li>
                          <li>‚Ä¢ <strong>Timeout:</strong> Retry with exponential backoff</li>
                          <li>‚Ä¢ <strong>Logging:</strong> Store execution results for analysis</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>Async Scenario Handling</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`// For long-running Make scenarios
1. n8n triggers Make scenario
2. Make returns immediate response with execution_id
3. Make processes scenario asynchronously
4. Make sends completion webhook back to n8n
5. n8n continues workflow with final results

n8n Webhook Response Handler:
{
  "execution_id": "{{make.execution_id}}",
  "status": "completed",
  "results": "{{make.scenario_output}}",
  "processing_time": "{{make.duration}}"
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Trigger Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Configure webhook URLs in Make</li>
                          <li>‚òê Set up conditional logic in n8n</li>
                          <li>‚òê Test trigger reliability</li>
                          <li>‚òê Implement error handling</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Response Management:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Handle sync/async responses</li>
                          <li>‚òê Set up timeout mechanisms</li>
                          <li>‚òê Log execution results</li>
                          <li>‚òê Monitor scenario performance</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'make-step-4',
              title: 'Data Exchange',
              description: 'Exchange data between n8n and Make',
              estimated_time: '35 min',
              difficulty: 'Intermediate',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>n8n ‚Üî Make Data Exchange</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>üîÑ Bi-directional Data Flow</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Implement seamless data exchange between n8n AI agents and Make scenarios, ensuring data integrity, 
                      proper formatting, and efficient synchronization across platforms.
                    </p>
                    
                    <div className="flex items-center justify-center space-x-4 mb-4">
                      <div className={`${theme === 'gradient' ? 'bg-blue-600' : 'bg-blue-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">n8n Agent Data</div>
                        <div className="text-xs">Processing Results</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'text-gray-400' : 'text-gray-600'}`}>‚áÑ</div>
                      <div className={`${theme === 'gradient' ? 'bg-purple-600' : 'bg-purple-500'} text-white px-4 py-2 rounded-lg text-center`}>
                        <div className="font-semibold">Make App Data</div>
                        <div className="text-xs">External Sources</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Data Transformation Patterns</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>n8n ‚Üí Make Data Mapping</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`// n8n Function Node
const makeData = {
  customer: {
    id: $json.user_id,
    email: $json.email,
    name: $json.full_name
  },
  analysis: {
    score: $json.ai_score,
    confidence: $json.confidence,
    tags: $json.categories
  },
  metadata: {
    processed_at: new Date().toISOString(),
    workflow: $workflow.name
  }
};

return { json: makeData };`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>Make ‚Üí n8n Data Structure</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`// Make HTTP Module Output
{
  "source": "make_scenario",
  "scenario_id": "{{scenario.id}}",
  "data": {
    "crm_contact": "{{salesforce.contact}}",
    "email_sent": "{{mailchimp.campaign}}",
    "social_posted": "{{twitter.tweet}}"
  },
  "execution": {
    "started": "{{execution.start}}",
    "completed": "{{execution.end}}",
    "status": "success"
  }
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Data Synchronization Strategies</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Real-time Sync</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Immediate data exchange triggered by events for time-sensitive operations
                        </p>
                        <ul className={`text-xs ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-500 dark:text-gray-400'} list-disc list-inside`}>
                          <li>Webhook-triggered immediate processing</li>
                          <li>Live data updates across platforms</li>
                          <li>Instant notification delivery</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Batch Processing</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Scheduled bulk data exchanges for efficiency and rate limit management
                        </p>
                        <ul className={`text-xs ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-500 dark:text-gray-400'} list-disc list-inside`}>
                          <li>Hourly/daily data synchronization</li>
                          <li>Bulk record processing</li>
                          <li>Resource-efficient operations</li>
                        </ul>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Conflict Resolution</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Handle data conflicts when same records are modified in both platforms
                        </p>
                        <ul className={`text-xs ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-500 dark:text-gray-400'} list-disc list-inside`}>
                          <li>Timestamp-based resolution</li>
                          <li>Priority-based merge strategies</li>
                          <li>Manual review queue for conflicts</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Data Validation & Quality</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Validation Rules</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Required field verification</li>
                          <li>‚Ä¢ Data type validation</li>
                          <li>‚Ä¢ Format standardization</li>
                          <li>‚Ä¢ Business rule enforcement</li>
                          <li>‚Ä¢ Duplicate detection</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Error Handling</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Invalid data quarantine</li>
                          <li>‚Ä¢ Automatic data cleansing</li>
                          <li>‚Ä¢ Notification on failures</li>
                          <li>‚Ä¢ Retry mechanisms with backoff</li>
                          <li>‚Ä¢ Manual review workflows</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Data Exchange Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Data Mapping:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Map field relationships</li>
                          <li>‚òê Define transformation rules</li>
                          <li>‚òê Set up validation schemas</li>
                          <li>‚òê Test data flow both directions</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Quality Control:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Implement data validation</li>
                          <li>‚òê Set up error monitoring</li>
                          <li>‚òê Create data quality reports</li>
                          <li>‚òê Monitor sync performance</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced Make features',
          steps: [
            {
              id: 'make-step-5',
              title: 'Hybrid Workflows',
              description: 'Create hybrid n8n-Make workflows',
              estimated_time: '45 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Hybrid n8n-Make Workflows</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>üîó Advanced Hybrid Architecture</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Design sophisticated workflows that seamlessly combine n8n's AI processing capabilities with Make's extensive 
                      app ecosystem, creating powerful automation pipelines that leverage the best of both platforms.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üß†</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">AI Processing</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">n8n Agents</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Orchestration</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Hybrid Logic</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üåê</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">App Ecosystem</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Make Scenarios</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Workflow Design Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üéØ Sequential Processing Pattern</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Hybrid Sequential Workflow:

1. Make: Data Collection (CRM + Email + Social)
   ‚Üì Webhook trigger
2. n8n: AI Analysis & Enrichment
   ‚îú‚îÄ Lead scoring with OpenAI
   ‚îú‚îÄ Sentiment analysis
   ‚îî‚îÄ Risk assessment
   ‚Üì HTTP request
3. Make: Action Execution
   ‚îú‚îÄ Update CRM with scores
   ‚îú‚îÄ Trigger email sequences
   ‚îî‚îÄ Schedule follow-up tasks

Benefits: Deep AI processing + Extensive app support`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîÑ Parallel Processing Pattern</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Hybrid Parallel Workflow:

Trigger: New customer signup
    ‚Üì
Split Processing:
‚îú‚îÄ n8n Branch: AI Onboarding
‚îÇ  ‚îú‚îÄ Generate personalized content
‚îÇ  ‚îú‚îÄ Analyze user preferences
‚îÇ  ‚îî‚îÄ Create custom workflow
‚îî‚îÄ Make Branch: System Setup
   ‚îú‚îÄ Create accounts in all tools
   ‚îú‚îÄ Set up billing/subscriptions
   ‚îî‚îÄ Configure integrations
    ‚Üì
Merge: Combine results ‚Üí Send welcome package`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>State Management & Coordination</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Shared State Storage</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Database for workflow state</li>
                          <li>‚Ä¢ Redis for temporary data</li>
                          <li>‚Ä¢ Webhook queues for handoffs</li>
                          <li>‚Ä¢ Status tracking across platforms</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Error Recovery</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Cross-platform retry logic</li>
                          <li>‚Ä¢ State rollback mechanisms</li>
                          <li>‚Ä¢ Alternative pathway routing</li>
                          <li>‚Ä¢ Manual intervention queues</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Architecture:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Design workflow handoff points</li>
                          <li>‚òê Set up shared state storage</li>
                          <li>‚òê Configure error recovery</li>
                          <li>‚òê Plan monitoring strategy</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Testing:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Test end-to-end workflows</li>
                          <li>‚òê Validate error scenarios</li>
                          <li>‚òê Performance benchmarking</li>
                          <li>‚òê Load testing with real data</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'make-step-6',
              title: 'Advanced Routing',
              description: 'Implement complex routing between platforms',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Advanced Routing & Orchestration</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>üéØ Intelligent Routing Systems</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Implement sophisticated routing logic that dynamically determines the optimal path for data processing 
                      based on real-time conditions, load balancing, and business rules across n8n and Make platforms.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üß≠</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Smart Routing</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Conditional Logic</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">‚öñÔ∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Load Balancing</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Resource Optimization</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">ü§ñ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">AI Optimization</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Machine Learning</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Dynamic Routing Strategies</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üéõÔ∏è Content-Based Routing</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`n8n Router Node Configuration:

// Content Analysis Routing
const routingLogic = {
  'text_analysis': {
    condition: 'data.type === "text" && data.length > 1000',
    destination: 'make_nlp_scenario',
    priority: 'high'
  },
  'image_processing': {
    condition: 'data.type === "image" && data.size > 5MB',
    destination: 'n8n_vision_agent',
    priority: 'medium'
  },
  'simple_automation': {
    condition: 'data.complexity_score < 3',
    destination: 'make_basic_scenario',
    priority: 'low'
  }
};`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>‚ö° Performance-Based Routing</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Make Router Module Setup:

Performance Monitoring:
‚îú‚îÄ n8n_response_time: {{ avgResponseTime }}
‚îú‚îÄ make_queue_length: {{ currentQueue }}
‚îú‚îÄ system_load: {{ cpuUsage }}
‚îî‚îÄ api_rate_limits: {{ remaining }}

Routing Decision:
if (n8n_response_time < 2000 && system_load < 70%) {
  route_to: "n8n_primary_agent"
} else if (make_queue_length < 50) {
  route_to: "make_fallback_scenario"
} else {
  route_to: "queue_for_retry"
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Adaptive Routing with ML</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Learning Algorithm</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Track success rates per route</li>
                          <li>‚Ä¢ Analyze processing times</li>
                          <li>‚Ä¢ Monitor error patterns</li>
                          <li>‚Ä¢ Adjust weights dynamically</li>
                          <li>‚Ä¢ A/B test routing strategies</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Optimization Metrics</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Throughput maximization</li>
                          <li>‚Ä¢ Latency minimization</li>
                          <li>‚Ä¢ Cost optimization</li>
                          <li>‚Ä¢ Resource utilization</li>
                          <li>‚Ä¢ Quality score maintenance</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Advanced Use Cases</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üè¢ Enterprise Content Pipeline</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Route content based on complexity, urgency, and compliance requirements
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          Legal docs ‚Üí n8n compliance check ‚Üí Make approval workflow
                        </div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üõí Smart E-commerce Routing</h4>
                        <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-2`}>
                          Dynamic order routing based on inventory, shipping zones, and customer priority
                        </p>
                        <div className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                          VIP orders ‚Üí n8n priority scoring ‚Üí Make expedited fulfillment
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Routing Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Setup:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Define routing criteria</li>
                          <li>‚òê Set up monitoring endpoints</li>
                          <li>‚òê Configure fallback routes</li>
                          <li>‚òê Implement circuit breakers</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Optimization:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Baseline performance metrics</li>
                          <li>‚òê A/B test routing strategies</li>
                          <li>‚òê Implement learning algorithms</li>
                          <li>‚òê Set up automated adjustments</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'make-step-7',
              title: 'Monitoring & Debug',
              description: 'Monitor and debug cross-platform workflows',
              estimated_time: '35 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Monitoring & Debug Infrastructure</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-red-50 dark:bg-red-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-red-200 dark:border-red-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-red-600 dark:text-red-400 mb-4`}>üîç Unified Monitoring Dashboard</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Build comprehensive monitoring systems that provide real-time visibility into your hybrid n8n-Make 
                      workflows with advanced debugging capabilities, performance tracking, and intelligent alerting.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üìä</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Real-time Metrics</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Performance KPIs</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">üêõ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Debug Tools</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Error Tracking</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üö®</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Smart Alerts</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Proactive Monitoring</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üìà</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Analytics</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Trend Analysis</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Cross-Platform Monitoring Setup</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üì° n8n Monitoring Configuration</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`n8n Webhook Monitor Setup:

// Global execution monitor
n8n.workflows.on('execution.started', (data) => {
  const monitoring = {
    execution_id: data.executionId,
    workflow_id: data.workflowId,
    timestamp: new Date(),
    platform: 'n8n',
    status: 'started',
    input_data: data.inputData,
    trigger_source: data.trigger
  };
  
  // Send to centralized monitoring
  fetch('https://monitor.example.com/api/executions', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(monitoring)
  });
});`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîß Make Scenario Monitoring</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Make HTTP Module for Monitoring:

URL: https://monitor.example.com/api/scenario-events
Method: POST
Headers:
  Content-Type: application/json
  X-Monitor-Source: make

Body:
{
  "scenario_id": "{{scenario.id}}",
  "execution_id": "{{execution.id}}",
  "timestamp": "{{now}}",
  "status": "{{execution.status}}",
  "processing_time": "{{execution.duration}}",
  "data_size": "{{size(bundle)}}",
  "error_details": "{{ifempty(execution.error, null)}}"
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Key Performance Indicators (KPIs)</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Performance Metrics</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Average execution time</li>
                          <li>‚Ä¢ Throughput (executions/hour)</li>
                          <li>‚Ä¢ Success rate percentage</li>
                          <li>‚Ä¢ Queue length & wait times</li>
                          <li>‚Ä¢ Resource utilization</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Error Tracking</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Error frequency & patterns</li>
                          <li>‚Ä¢ Failure categorization</li>
                          <li>‚Ä¢ Retry attempt tracking</li>
                          <li>‚Ä¢ Recovery time metrics</li>
                          <li>‚Ä¢ Root cause analysis</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Business Impact</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Cost per execution</li>
                          <li>‚Ä¢ ROI tracking</li>
                          <li>‚Ä¢ User satisfaction scores</li>
                          <li>‚Ä¢ Process efficiency gains</li>
                          <li>‚Ä¢ Compliance adherence</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Advanced Debug & Troubleshooting</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîç Debug Mode Configuration</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Debug Environment Variables:

# Enable detailed logging
N8N_LOG_LEVEL=debug
N8N_DEBUG_WEBHOOK_REQUESTS=true
MAKE_DEBUG_MODE=1

# Capture execution traces
N8N_EXECUTION_DATA_SAVE_ON_ERROR=all
N8N_EXECUTION_DATA_SAVE_ON_SUCCESS=all
N8N_EXECUTION_DATA_SAVE_MANUAL_EXECUTIONS=true

# Performance profiling
N8N_METRICS_ENABLE=true
N8N_DIAGNOSTICS_ENABLE=true`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üö® Intelligent Alerting System</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Alert Configuration Examples:

// High error rate alert
{
  "name": "High Error Rate",
  "condition": "error_rate > 5% over 10 minutes",
  "severity": "critical",
  "channels": ["slack", "email", "pagerduty"],
  "actions": ["auto_scale", "fallback_route"]
}

// Performance degradation
{
  "name": "Slow Processing",
  "condition": "avg_execution_time > 30s for 5 minutes",
  "severity": "warning", 
  "channels": ["slack"],
  "actions": ["resource_scale_up"]
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Troubleshooting Playbook</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Common Issues & Solutions</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Webhook timeouts:</strong> Increase timeout limits</li>
                          <li>‚Ä¢ <strong>Rate limiting:</strong> Implement backoff strategies</li>
                          <li>‚Ä¢ <strong>Memory issues:</strong> Optimize data processing</li>
                          <li>‚Ä¢ <strong>Authentication failures:</strong> Token rotation</li>
                          <li>‚Ä¢ <strong>Network errors:</strong> Retry with exponential backoff</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Debug Tools</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Postman:</strong> API endpoint testing</li>
                          <li>‚Ä¢ <strong>n8n Debug Mode:</strong> Step-by-step execution</li>
                          <li>‚Ä¢ <strong>Make DevTools:</strong> Scenario debugging</li>
                          <li>‚Ä¢ <strong>Log Aggregation:</strong> Centralized analysis</li>
                          <li>‚Ä¢ <strong>Performance Profilers:</strong> Bottleneck identification</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Monitoring Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Infrastructure:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Set up centralized logging</li>
                          <li>‚òê Configure monitoring dashboards</li>
                          <li>‚òê Implement alerting systems</li>
                          <li>‚òê Create debug environments</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Operations:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Define KPI baselines</li>
                          <li>‚òê Create troubleshooting runbooks</li>
                          <li>‚òê Set up automated recovery</li>
                          <li>‚òê Train team on debug tools</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        }
      ]
    },
    webhooks: {
      id: 'webhooks',
      title: 'n8n + Webhooks Integration',
      icon: <Webhook className="h-5 w-5" />,
      description: 'Connect n8n agents using webhooks for real-time communication',
      sections: [
        {
          id: 'foundation',
          title: 'üîó Foundation',
          description: 'Setup webhook integration',
          steps: [
            {
              id: 'webhook-step-1',
              title: 'Agent Webhook Design',
              description: 'Design webhook patterns for agent communication',
              estimated_time: '20 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Agent Webhook Design</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>üéØ Webhook Architecture for AI Agents</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Design robust webhook patterns that enable seamless communication between n8n AI agents and external systems, 
                      ensuring reliable data flow and event-driven automation with proper error handling and scalability.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üîó</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Event-Driven</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Real-time Communication</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üõ°Ô∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Secure</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Authentication & Validation</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Scalable</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">High Throughput</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Webhook Design Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üì§ Outbound Agent Events</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Agent Event Webhook Structure:

POST /webhook/agent-events
Content-Type: application/json
X-Agent-Signature: sha256=...

{
  "event_id": "evt_agent_12345",
  "event_type": "agent.task.completed",
  "timestamp": "2024-01-15T10:30:00Z",
  "agent_id": "agent_ai_assistant_001",
  "workflow_id": "wf_customer_support",
  "data": {
    "task_result": "Customer query resolved",
    "confidence_score": 0.95,
    "processing_time_ms": 1250,
    "tokens_used": 450
  },
  "metadata": {
    "user_id": "user_123",
    "session_id": "sess_abc789"
  }
}`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üì• Inbound Agent Triggers</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`External System ‚Üí Agent Trigger:

POST /webhook/agent-trigger/customer-inquiry
Content-Type: application/json
Authorization: Bearer <api_token>

{
  "trigger_id": "trig_customer_12345",
  "source_system": "zendesk",
  "priority": "high",
  "customer_data": {
    "name": "John Doe",
    "email": "john@example.com",
    "tier": "premium",
    "issue_category": "billing"
  },
  "context": {
    "previous_interactions": 3,
    "sentiment": "frustrated",
    "urgency_score": 8
  }
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Event Types & Use Cases</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Agent Lifecycle Events</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>agent.started:</strong> Agent begins execution</li>
                          <li>‚Ä¢ <strong>agent.completed:</strong> Task finished successfully</li>
                          <li>‚Ä¢ <strong>agent.failed:</strong> Task encountered error</li>
                          <li>‚Ä¢ <strong>agent.timeout:</strong> Execution time exceeded</li>
                          <li>‚Ä¢ <strong>agent.paused:</strong> Waiting for input</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Business Events</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>customer.inquiry:</strong> New support request</li>
                          <li>‚Ä¢ <strong>lead.qualified:</strong> Sales lead scored</li>
                          <li>‚Ä¢ <strong>content.generated:</strong> AI content created</li>
                          <li>‚Ä¢ <strong>alert.triggered:</strong> System alert raised</li>
                          <li>‚Ä¢ <strong>analysis.completed:</strong> Data analysis done</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Design Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Event Structure:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Unique event IDs for deduplication</li>
                          <li>‚òê Timestamp for ordering & debugging</li>
                          <li>‚òê Event types for routing & filtering</li>
                          <li>‚òê Structured data payloads</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Reliability:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Idempotency support</li>
                          <li>‚òê Retry logic with backoff</li>
                          <li>‚òê Dead letter queues</li>
                          <li>‚òê Monitoring & alerting</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'webhook-step-2',
              title: 'Webhook Endpoints',
              description: 'Create webhook endpoints for agents',
              estimated_time: '25 min',
              difficulty: 'Beginner',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Webhook Endpoints Setup</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>üîß n8n Webhook Configuration</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Create and configure webhook endpoints in n8n to receive external events and trigger AI agent workflows. 
                      Set up both incoming and outgoing webhooks with proper authentication and data validation.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üì®</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Incoming</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Trigger Workflows</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">üì§</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Outgoing</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Send Events</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üîí</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Secure</div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">Authenticated</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Incoming Webhook Setup</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>1. Create Webhook Trigger Node</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`n8n Webhook Node Configuration:

Node Type: Webhook (Trigger)
HTTP Method: POST
Path: /agent-trigger/{agent_type}
Response Code: 200
Response Data: {"status": "received", "timestamp": "{{new Date().toISOString()}}"}

Authentication:
‚îú‚îÄ Header Auth: X-API-Key
‚îú‚îÄ Query Auth: api_key
‚îî‚îÄ Basic Auth: username/password

Validation:
‚îú‚îÄ Required Headers: Content-Type, X-Event-Type
‚îú‚îÄ JSON Schema validation
‚îî‚îÄ Rate limiting: 100 req/min`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>2. Data Processing & Validation</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Validate Payload:

// Validate incoming webhook data
const payload = $json.body;
const headers = $json.headers;

// Check required fields
const required = ['event_type', 'timestamp', 'data'];
const missing = required.filter(field => !payload[field]);

if (missing.length > 0) {
  throw new Error(\`Missing required fields: \${missing.join(', ')}\`);
}

// Validate event type
const validTypes = ['customer.inquiry', 'lead.qualified', 'alert.triggered'];
if (!validTypes.includes(payload.event_type)) {
  throw new Error('Invalid event type');
}

return {
  validated: true,
  event_id: payload.event_id || \`evt_\${Date.now()}\`,
  ...payload
};`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Outgoing Webhook Setup</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>HTTP Request Node Configuration</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Outgoing Webhook Configuration:

URL: {{$node["Environment"].json["webhook_url"]}}
Method: POST
Headers:
  Content-Type: application/json
  X-Event-Source: n8n-agent
  X-Signature: {{$binary.createHmac('sha256', $env.WEBHOOK_SECRET).update(JSON.stringify($json)).digest('hex')}}
  User-Agent: n8n-webhook/1.0

Body:
{
  "event_id": "{{$json.event_id}}",
  "event_type": "{{$json.event_type}}",
  "timestamp": "{{$json.timestamp}}",
  "source": {
    "workflow_id": "{{$workflow.id}}",
    "execution_id": "{{$execution.id}}",
    "node_name": "{{$node.name}}"
  },
  "data": {{$json}}
}

Retry Logic:
‚îú‚îÄ Max Retries: 3
‚îú‚îÄ Backoff: Exponential (1s, 2s, 4s)
‚îî‚îÄ Timeout: 10 seconds`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Common Webhook Endpoints</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Agent Triggers</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <code>/webhook/customer-support</code></li>
                          <li>‚Ä¢ <code>/webhook/lead-qualification</code></li>
                          <li>‚Ä¢ <code>/webhook/content-generation</code></li>
                          <li>‚Ä¢ <code>/webhook/data-analysis</code></li>
                          <li>‚Ä¢ <code>/webhook/alert-processing</code></li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Status & Control</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <code>/webhook/health-check</code></li>
                          <li>‚Ä¢ <code>/webhook/agent-status</code></li>
                          <li>‚Ä¢ <code>/webhook/pause-agent</code></li>
                          <li>‚Ä¢ <code>/webhook/resume-agent</code></li>
                          <li>‚Ä¢ <code>/webhook/metrics</code></li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Endpoint Configuration Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Security:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Authentication method configured</li>
                          <li>‚òê HTTPS enforced for production</li>
                          <li>‚òê Request signature validation</li>
                          <li>‚òê Rate limiting implemented</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Reliability:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Input validation & sanitization</li>
                          <li>‚òê Error handling & logging</li>
                          <li>‚òê Idempotency support</li>
                          <li>‚òê Monitoring & health checks</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'communication',
          title: 'üì° Communication',
          description: 'Agent webhook communication',
          steps: [
            {
              id: 'webhook-step-3',
              title: 'Send Agent Data',
              description: 'Send agent data via webhooks',
              estimated_time: '30 min',
              difficulty: 'Intermediate',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Send Agent Data via Webhooks</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>üì§ Agent Data Transmission</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Configure n8n workflows to send AI agent results, progress updates, and events to external systems 
                      through webhooks with proper data formatting, error handling, and delivery confirmation.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">ü§ñ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Agent Results</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üìä</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Progress Updates</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">‚ö†Ô∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Error Events</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üìã</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Status Changes</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Webhook Data Payload Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üéØ Task Completion Webhook</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Task Completion Payload:

{
  "event_type": "agent.task.completed",
  "event_id": "{{$json.task_id}}_complete",
  "timestamp": "{{new Date().toISOString()}}",
  "agent": {
    "id": "{{$json.agent_id}}",
    "name": "{{$json.agent_name}}",
    "version": "1.0.0"
  },
  "task": {
    "id": "{{$json.task_id}}",
    "type": "{{$json.task_type}}",
    "started_at": "{{$json.start_time}}",
    "completed_at": "{{new Date().toISOString()}}",
    "duration_ms": "{{Date.now() - new Date($json.start_time).getTime()}}"
  },
  "result": {
    "status": "success",
    "confidence": "{{$json.confidence_score}}",
    "output": "{{$json.result}}",
    "tokens_used": "{{$json.token_count}}",
    "cost_estimate": "{{$json.estimated_cost}}"
  },
  "metadata": {
    "workflow_id": "{{$workflow.id}}",
    "execution_id": "{{$execution.id}}",
    "user_id": "{{$json.user_id}}"
  }
}`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üìà Progress Update Webhook</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Progress Update Function Node:

// Calculate progress percentage
const totalSteps = $json.workflow_steps.length;
const completedSteps = $json.workflow_steps.filter(step => step.completed).length;
const progressPercent = Math.round((completedSteps / totalSteps) * 100);

return {
  "event_type": "agent.progress.update",
  "event_id": \`\${$json.task_id}_progress_\${Date.now()}\`,
  "timestamp": new Date().toISOString(),
  "progress": {
    "percentage": progressPercent,
    "current_step": $json.current_step,
    "total_steps": totalSteps,
    "completed_steps": completedSteps,
    "estimated_completion": new Date(Date.now() + $json.estimated_remaining_ms).toISOString()
  },
  "status": "in_progress",
  "last_action": $json.last_completed_action
};`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Delivery Patterns & Strategies</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Immediate Delivery</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Real-time event streaming</li>
                          <li>‚Ä¢ Critical alerts & errors</li>
                          <li>‚Ä¢ User interaction responses</li>
                          <li>‚Ä¢ Status change notifications</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Batched Delivery</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ Analytics & metrics data</li>
                          <li>‚Ä¢ Bulk progress updates</li>
                          <li>‚Ä¢ Scheduled reports</li>
                          <li>‚Ä¢ Cost optimization</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Data Structure:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Consistent event schema</li>
                          <li>‚òê Unique event identifiers</li>
                          <li>‚òê Timestamp standardization</li>
                          <li>‚òê Data validation rules</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Delivery Reliability:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Delivery confirmation tracking</li>
                          <li>‚òê Retry logic for failures</li>
                          <li>‚òê Dead letter queue setup</li>
                          <li>‚òê Performance monitoring</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'webhook-step-4',
              title: 'Receive Agent Events',
              description: 'Handle incoming webhook events for agents',
              estimated_time: '25 min',
              difficulty: 'Intermediate',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Receive Agent Events</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-orange-50 dark:bg-orange-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-orange-200 dark:border-orange-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-orange-600 dark:text-orange-400 mb-4`}>üì• Incoming Event Processing</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Handle incoming webhook events from external systems to trigger AI agent workflows, process user requests, 
                      and respond to system alerts with automated intelligence and proper event routing.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">üéØ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Event Routing</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üîç</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Data Validation</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üöÄ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Auto-Response</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-red-600 dark:text-red-400">‚ö°</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Real-time Processing</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Event Processing Workflow</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîç Event Classification & Routing</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Switch Node - Event Router:

// Route based on event type
const eventType = $json.event_type;
const priority = $json.priority || 'normal';

switch(eventType) {
  case 'customer.inquiry':
    return priority === 'urgent' ? 
      {route: 'priority_support_agent'} : 
      {route: 'standard_support_agent'};
      
  case 'lead.qualified':
    return {route: 'sales_agent', 
            lead_score: $json.data.score};
            
  case 'content.request':
    return {route: 'content_generation_agent',
            content_type: $json.data.type};
            
  case 'alert.system':
    return {route: 'monitoring_agent',
            severity: $json.data.severity};
            
  default:
    return {route: 'general_processing_agent'};
}`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üìã Data Enrichment & Context</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Enrich Event Data:

// Enrich incoming event with context
const baseEvent = $json;
const userId = baseEvent.user_id;

// Fetch user context if available
let userContext = {};
if (userId) {
  // This would typically fetch from your database
  userContext = {
    tier: 'premium',
    interaction_history: 15,
    last_interaction: '2024-01-10',
    preferences: ['email', 'urgent_only']
  };
}

// Add timestamps and tracking
const enrichedEvent = {
  ...baseEvent,
  received_at: new Date().toISOString(),
  processing_id: \`proc_\${Date.now()}_\${Math.random().toString(36).substr(2, 9)}\`,
  user_context: userContext,
  enrichment_version: '1.0'
};

return enrichedEvent;`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Common Event Types & Responses</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Customer Support Events</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>ticket.created:</strong> Auto-categorize & assign</li>
                          <li>‚Ä¢ <strong>chat.message:</strong> AI response generation</li>
                          <li>‚Ä¢ <strong>escalation.needed:</strong> Human handoff trigger</li>
                          <li>‚Ä¢ <strong>satisfaction.low:</strong> Manager notification</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Business Process Events</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>order.placed:</strong> Fraud analysis & approval</li>
                          <li>‚Ä¢ <strong>user.signup:</strong> Onboarding sequence start</li>
                          <li>‚Ä¢ <strong>payment.failed:</strong> Retry logic & notification</li>
                          <li>‚Ä¢ <strong>content.requested:</strong> AI generation pipeline</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>Response Patterns</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üì§ Immediate Response</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`HTTP Response Node:

Status Code: 200
Headers:
  Content-Type: application/json
  X-Processed-By: n8n-agent

Response Body:
{
  "status": "received",
  "event_id": "{{$json.event_id}}",
  "processing_id": "{{$json.processing_id}}",
  "estimated_completion": "{{new Date(Date.now() + 30000).toISOString()}}",
  "acknowledgment": {
    "received_at": "{{$json.received_at}}",
    "assigned_agent": "{{$json.assigned_agent}}",
    "priority": "{{$json.priority}}"
  }
}`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Event Handling Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Processing:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Event validation & sanitization</li>
                          <li>‚òê Routing logic implementation</li>
                          <li>‚òê Context enrichment setup</li>
                          <li>‚òê Error handling & logging</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Response:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Immediate acknowledgment</li>
                          <li>‚òê Progress tracking setup</li>
                          <li>‚òê Completion notification</li>
                          <li>‚òê Failure recovery mechanism</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        },
        {
          id: 'advanced',
          title: 'üöÄ Advanced',
          description: 'Advanced webhook features',
          steps: [
            {
              id: 'webhook-step-5',
              title: 'Webhook Security',
              description: 'Secure agent webhooks with authentication',
              estimated_time: '35 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Webhook Security & Authentication</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-red-50 dark:bg-red-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-red-200 dark:border-red-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-red-600 dark:text-red-400 mb-4`}>üîí Enterprise Security Framework</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Implement comprehensive security measures for webhook endpoints including authentication, authorization, 
                      signature verification, rate limiting, and attack prevention to protect AI agent workflows.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üîê</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Authentication</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">‚úçÔ∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Signatures</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">üö¶</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Rate Limiting</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üõ°Ô∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Protection</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Authentication Methods</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîë API Key Authentication</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Validate API Key:

// Check API key from header or query
const apiKey = $json.headers['x-api-key'] || $json.query.api_key;

if (!apiKey) {
  throw new Error('Missing API key');
}

// Validate against stored keys (use environment variables)
const validKeys = process.env.WEBHOOK_API_KEYS?.split(',') || [];
const isValidKey = validKeys.includes(apiKey);

if (!isValidKey) {
  throw new Error('Invalid API key');
}

// Check key permissions (if implemented)
const keyPermissions = {
  'key_premium_001': ['customer.inquiry', 'lead.qualified'],
  'key_basic_002': ['content.request']
};

const eventType = $json.body.event_type;
const allowedEvents = keyPermissions[apiKey] || [];

if (!allowedEvents.includes(eventType)) {
  throw new Error('API key not authorized for this event type');
}

return { authenticated: true, api_key: apiKey };`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>‚úçÔ∏è HMAC Signature Verification</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Verify HMAC Signature:

const crypto = require('crypto');

// Get signature from header
const receivedSignature = $json.headers['x-webhook-signature'];
const payload = JSON.stringify($json.body);
const secret = process.env.WEBHOOK_SECRET;

if (!receivedSignature || !secret) {
  throw new Error('Missing signature or secret');
}

// Calculate expected signature
const expectedSignature = 'sha256=' + 
  crypto.createHmac('sha256', secret)
    .update(payload, 'utf8')
    .digest('hex');

// Secure comparison to prevent timing attacks
const signatureBuffer = Buffer.from(receivedSignature);
const expectedBuffer = Buffer.from(expectedSignature);

if (signatureBuffer.length !== expectedBuffer.length) {
  throw new Error('Invalid signature length');
}

const isValid = crypto.timingSafeEqual(signatureBuffer, expectedBuffer);

if (!isValid) {
  throw new Error('Invalid webhook signature');
}

return { signature_verified: true };`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Rate Limiting & Protection</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Rate Limiting Strategy</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Per API Key:</strong> 100 req/min</li>
                          <li>‚Ä¢ <strong>Per IP:</strong> 200 req/min</li>
                          <li>‚Ä¢ <strong>Global:</strong> 10,000 req/min</li>
                          <li>‚Ä¢ <strong>Burst handling:</strong> 150% for 30s</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Attack Prevention</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Request size:</strong> Max 1MB payload</li>
                          <li>‚Ä¢ <strong>Timeout:</strong> 30s processing limit</li>
                          <li>‚Ä¢ <strong>IP blocking:</strong> Auto-ban suspicious IPs</li>
                          <li>‚Ä¢ <strong>Content validation:</strong> JSON schema check</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Security Best Practices</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîç Input Validation & Sanitization</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Input Validation:

const payload = $json.body;

// Validate required fields
const requiredFields = ['event_type', 'timestamp', 'data'];
const missingFields = requiredFields.filter(field => !payload[field]);

if (missingFields.length > 0) {
  throw new Error(\`Missing required fields: \${missingFields.join(', ')}\`);
}

// Sanitize string inputs
const sanitize = (str) => {
  if (typeof str !== 'string') return str;
  return str.replace(/<script[^>]*>.*?<\/script>/gi, '')
            .replace(/javascript:/gi, '')
            .replace(/on\\w+=/gi, '');
};

// Recursively sanitize object
const sanitizeObject = (obj) => {
  if (typeof obj === 'string') return sanitize(obj);
  if (Array.isArray(obj)) return obj.map(sanitizeObject);
  if (typeof obj === 'object' && obj !== null) {
    const sanitized = {};
    for (const [key, value] of Object.entries(obj)) {
      sanitized[sanitize(key)] = sanitizeObject(value);
    }
    return sanitized;
  }
  return obj;
};

return sanitizeObject(payload);`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Security Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Authentication:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê API key validation implemented</li>
                          <li>‚òê HMAC signature verification</li>
                          <li>‚òê Bearer token support (if needed)</li>
                          <li>‚òê Permission-based access control</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Protection:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Rate limiting configured</li>
                          <li>‚òê Input validation & sanitization</li>
                          <li>‚òê Request size limits set</li>
                          <li>‚òê Security monitoring enabled</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'webhook-step-6',
              title: 'Retry & Reliability',
              description: 'Implement retry logic for reliable delivery',
              estimated_time: '40 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Retry & Reliability</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>üîÑ Robust Delivery System</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Build resilient webhook delivery systems with intelligent retry mechanisms, exponential backoff, 
                      dead letter queues, and comprehensive failure recovery to ensure no agent event is lost.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üîÑ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Auto Retry</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">üìà</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Backoff Strategy</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-red-600 dark:text-red-400">üíÄ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Dead Letter Queue</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">üéØ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Circuit Breaker</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Retry Strategy Implementation</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>‚è∞ Exponential Backoff Logic</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Retry with Backoff:

const attempt = $json.retry_attempt || 0;
const maxRetries = 5;
const baseDelay = 1000; // 1 second

if (attempt >= maxRetries) {
  // Send to dead letter queue
  return {
    action: 'dead_letter',
    webhook_data: $json.original_payload,
    final_error: $json.last_error,
    attempts: attempt
  };
}

// Calculate backoff delay: 1s, 2s, 4s, 8s, 16s
const delay = baseDelay * Math.pow(2, attempt);
const jitter = Math.random() * 1000; // Add jitter to prevent thundering herd
const finalDelay = delay + jitter;

return {
  action: 'retry',
  delay_ms: finalDelay,
  retry_attempt: attempt + 1,
  next_retry_at: new Date(Date.now() + finalDelay).toISOString(),
  webhook_data: $json.original_payload
};`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üîß n8n Wait & Retry Workflow</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`n8n Retry Workflow Design:

1. HTTP Request Node
   ‚îú‚îÄ URL: Target webhook endpoint
   ‚îú‚îÄ Timeout: 30 seconds
   ‚îú‚îÄ On Success: ‚Üí Complete
   ‚îî‚îÄ On Error: ‚Üí Error Handler

2. Error Handler Function
   ‚îú‚îÄ Check error type (timeout, 5xx, network)
   ‚îú‚îÄ Calculate retry delay
   ‚îú‚îÄ Update retry attempt counter
   ‚îî‚îÄ Route to appropriate action

3. Wait Node (Dynamic)
   ‚îú‚îÄ Wait time: {{$json.delay_ms}}
   ‚îî‚îÄ Continue to: Retry HTTP Request

4. Dead Letter Queue
   ‚îú‚îÄ Store failed webhook data
   ‚îú‚îÄ Log error details
   ‚îú‚îÄ Send alert notification
   ‚îî‚îÄ Create manual review task`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Error Classification & Handling</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Retryable Errors</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>5xx:</strong> Server errors</li>
                          <li>‚Ä¢ <strong>429:</strong> Rate limiting</li>
                          <li>‚Ä¢ <strong>Timeout:</strong> Network issues</li>
                          <li>‚Ä¢ <strong>DNS:</strong> Resolution failures</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Non-Retryable Errors</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>4xx:</strong> Client errors</li>
                          <li>‚Ä¢ <strong>401/403:</strong> Auth failures</li>
                          <li>‚Ä¢ <strong>400:</strong> Bad requests</li>
                          <li>‚Ä¢ <strong>404:</strong> Not found</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Special Handling</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Rate limits:</strong> Honor Retry-After</li>
                          <li>‚Ä¢ <strong>Circuit break:</strong> Temp disable endpoint</li>
                          <li>‚Ä¢ <strong>Graceful degr:</strong> Fallback endpoints</li>
                          <li>‚Ä¢ <strong>Monitoring:</strong> Alert on patterns</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-red-50 dark:bg-red-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-red-200 dark:border-red-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-red-600 dark:text-red-400 mb-4`}>Dead Letter Queue Management</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üíÄ DLQ Processing Workflow</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Dead Letter Queue Handler:

// Store failed webhook for manual review
const dlqEntry = {
  webhook_id: $json.webhook_id,
  original_payload: $json.webhook_data,
  endpoint_url: $json.target_url,
  failure_reason: $json.final_error,
  retry_attempts: $json.attempts,
  failed_at: new Date().toISOString(),
  status: 'pending_review'
};

// Save to database for tracking
await supabase
  .from('webhook_failures')
  .insert(dlqEntry);

// Send alert to operations team
await sendSlackAlert({
  channel: '#ops-alerts',
  message: \`üö® Webhook delivery failed after \${$json.attempts} attempts\\nEndpoint: \${$json.target_url}\\nError: \${$json.final_error}\`,
  webhook_id: $json.webhook_id
});

// Create manual review task
await createTask({
  title: 'Review Failed Webhook Delivery',
  priority: 'high',
  assignee: 'ops-team',
  webhook_id: $json.webhook_id
});`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Reliability Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Retry Logic:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Exponential backoff implemented</li>
                          <li>‚òê Jitter added to prevent thundering herd</li>
                          <li>‚òê Maximum retry limit configured</li>
                          <li>‚òê Error classification logic</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Failure Management:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Dead letter queue setup</li>
                          <li>‚òê Failed webhook tracking</li>
                          <li>‚òê Alert system configured</li>
                          <li>‚òê Manual review process</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            },
            {
              id: 'webhook-step-7',
              title: 'Webhook Analytics',
              description: 'Monitor and analyze webhook performance',
              estimated_time: '30 min',
              difficulty: 'Advanced',
              content: (
                <div className="space-y-6">
                  <h2 className={`text-2xl font-bold mb-4 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>Webhook Analytics & Monitoring</h2>
                  
                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-purple-50 dark:bg-purple-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-purple-200 dark:border-purple-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-purple-600 dark:text-purple-400 mb-4`}>üìä Comprehensive Webhook Analytics</h3>
                    <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'} mb-4`}>
                      Monitor webhook performance, track delivery metrics, analyze agent communication patterns, 
                      and gain insights into your automation workflows with real-time dashboards and alerts.
                    </p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">üìà</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Performance Metrics</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-green-600 dark:text-green-400">‚úÖ</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Success Rates</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">‚è±Ô∏è</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Response Times</div>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border text-center`}>
                        <div className="text-2xl font-bold text-red-600 dark:text-red-400">üö®</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Error Tracking</div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-blue-50 dark:bg-blue-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-blue-200 dark:border-blue-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-blue-600 dark:text-blue-400 mb-4`}>Key Performance Indicators</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üìä Metrics Collection Workflow</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Function Node - Collect Webhook Metrics:

const webhookStart = Date.now();
const eventData = $json;

// After webhook processing
const processingTime = Date.now() - webhookStart;

const metrics = {
  webhook_id: eventData.webhook_id,
  endpoint: eventData.endpoint_url,
  event_type: eventData.event_type,
  status: eventData.success ? 'success' : 'failed',
  response_time_ms: processingTime,
  payload_size_bytes: JSON.stringify(eventData).length,
  http_status: eventData.http_status || 200,
  retry_attempts: eventData.retry_count || 0,
  timestamp: new Date().toISOString(),
  user_agent: eventData.user_agent,
  source_ip: eventData.source_ip
};

// Store in analytics database
await supabase
  .from('webhook_analytics')
  .insert(metrics);

return metrics;`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üìà Real-time Dashboard Queries</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Analytics SQL Queries:

-- Success rate by endpoint (last 24h)
SELECT 
  endpoint,
  COUNT(*) as total_requests,
  COUNT(CASE WHEN status = 'success' THEN 1 END) as successful,
  ROUND(COUNT(CASE WHEN status = 'success' THEN 1 END) * 100.0 / COUNT(*), 2) as success_rate
FROM webhook_analytics 
WHERE timestamp > NOW() - INTERVAL '24 hours'
GROUP BY endpoint
ORDER BY total_requests DESC;

-- Average response time trends
SELECT 
  DATE_TRUNC('hour', timestamp) as hour,
  AVG(response_time_ms) as avg_response_time,
  PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY response_time_ms) as p95_response_time
FROM webhook_analytics 
WHERE timestamp > NOW() - INTERVAL '7 days'
GROUP BY hour
ORDER BY hour;`}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-green-50 dark:bg-green-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-green-200 dark:border-green-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-green-600 dark:text-green-400 mb-4`}>Alert & Notification System</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Performance Alerts</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>High latency:</strong> P95 &gt; 5 seconds</li>
                          <li>‚Ä¢ <strong>Low success rate:</strong> &lt; 95% in 10 min</li>
                          <li>‚Ä¢ <strong>Volume spikes:</strong> &gt; 200% normal traffic</li>
                          <li>‚Ä¢ <strong>Error bursts:</strong> &gt; 10 errors/minute</li>
                        </ul>
                      </div>
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-2`}>Business Alerts</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Agent failures:</strong> Critical agent errors</li>
                          <li>‚Ä¢ <strong>Revenue impact:</strong> Payment webhook failures</li>
                          <li>‚Ä¢ <strong>SLA breaches:</strong> Customer-facing delays</li>
                          <li>‚Ä¢ <strong>Security events:</strong> Suspicious patterns</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-yellow-50 dark:bg-yellow-900/20'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-yellow-200 dark:border-yellow-800'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg text-yellow-600 dark:text-yellow-400 mb-4`}>Advanced Analytics Features</h3>
                    <div className="space-y-4">
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üéØ Predictive Analytics</h4>
                        <div className={`${theme === 'gradient' ? 'bg-gray-600/30' : 'bg-gray-100 dark:bg-gray-700'} p-3 rounded text-sm font-mono`}>
                          {`Trend Analysis Function:

// Predict potential issues based on trends
const analyzeWebhookTrends = async () => {
  const last24h = await getMetrics('24h');
  const last7d = await getMetrics('7d');
  
  const trends = {
    error_rate_trend: calculateTrend(last24h.error_rates, last7d.error_rates),
    latency_trend: calculateTrend(last24h.avg_latency, last7d.avg_latency),
    volume_trend: calculateTrend(last24h.request_count, last7d.request_count)
  };
  
  // Predict issues
  const predictions = [];
  
  if (trends.error_rate_trend > 0.1) {
    predictions.push({
      type: 'error_rate_increase',
      severity: 'warning',
      eta: '2-4 hours',
      recommendation: 'Check endpoint health'
    });
  }
  
  return predictions;
};`}
                        </div>
                      </div>
                      
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-white dark:bg-gray-800'} p-4 rounded-lg border`}>
                        <h4 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-3`}>üìã Custom Report Generation</h4>
                        <ul className={`text-sm space-y-1 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>
                          <li>‚Ä¢ <strong>Daily Summary:</strong> Key metrics & highlights</li>
                          <li>‚Ä¢ <strong>Weekly Trends:</strong> Performance patterns</li>
                          <li>‚Ä¢ <strong>Monthly Business Impact:</strong> ROI analysis</li>
                          <li>‚Ä¢ <strong>Custom Dashboards:</strong> Stakeholder-specific views</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <div className={`${theme === 'gradient' ? 'bg-gray-800/50' : 'bg-gray-50 dark:bg-gray-800/50'} border ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} rounded-lg p-6`}>
                    <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'} mb-4`}>Analytics Implementation Checklist</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Data Collection:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Metrics collection workflow</li>
                          <li>‚òê Data retention policies</li>
                          <li>‚òê Privacy compliance (GDPR)</li>
                          <li>‚òê Performance impact minimal</li>
                        </ul>
                      </div>
                      <div>
                        <p className="font-medium text-gray-800 dark:text-gray-200 mb-2">Monitoring & Alerts:</p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                          <li>‚òê Real-time dashboard setup</li>
                          <li>‚òê Alert thresholds configured</li>
                          <li>‚òê Notification channels active</li>
                          <li>‚òê Escalation procedures defined</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }
          ]
        }
      ]
    }
  };

  const toggleStep = (stepId: string) => {
    setExpandedStep(expandedStep === stepId ? null : stepId);
  };

  const openStepInTab = (step: Step) => {
    const newTab = {
      id: step.id,
      title: step.title,
      content: step.content,
      closeable: true
    };

    // Check if tab is already open
    if (openTabs.find(tab => tab.id === step.id)) {
      setActiveTab(step.id);
      return;
    }

    setOpenTabs(prev => [...prev, newTab]);
    setActiveTab(step.id);
  };

  const handleMarkStepComplete = async (stepId: string) => {
    await markStepComplete(stepId);
  };

  const handleMarkStepIncomplete = async (stepId: string) => {
    await markStepIncomplete(stepId);
  };

  const currentLearningPath = learningPaths[activeApp] || learningPaths.supabase;
  const totalSteps = currentLearningPath.sections.reduce((total, section) => total + section.steps.length, 0);

  // State to store completion data for ALL apps
  const [allAppsCompletionData, setAllAppsCompletionData] = useState<{ [key: string]: { completed: number; total: number } }>({});

  // Function to fetch completion data for all apps
  const fetchAllAppsCompletionData = useCallback(async () => {
    try {
      const { data: { user } } = await (await import('../../lib/supabase')).supabase.auth.getUser();
      if (!user) return;

      // Fetch all completed steps for this user across all tools
      const { data, error } = await (await import('../../lib/supabase')).supabase
        .from('user_learning_progress')
        .select('tool_id, step_id')
        .eq('user_id', user.id)
        .eq('completed', true);

      if (error) throw error;

      // Group completed steps by tool_id
      const completedStepsByTool: { [key: string]: Set<string> } = {};
      (data || []).forEach(item => {
        if (!completedStepsByTool[item.tool_id]) {
          completedStepsByTool[item.tool_id] = new Set();
        }
        completedStepsByTool[item.tool_id].add(item.step_id);
      });

      // Calculate completion data for all apps
      const completionData: { [key: string]: { completed: number; total: number } } = {};
      
      Object.keys(learningPaths).forEach(appId => {
        const path = learningPaths[appId];
        const totalStepsForApp = path.sections.reduce((total, section) => total + section.steps.length, 0);
        const completedStepsForApp = completedStepsByTool[appId]?.size || 0;
        
        completionData[appId] = {
          completed: completedStepsForApp,
          total: totalStepsForApp
        };
      });

      setAllAppsCompletionData(completionData);
    } catch (err) {
      console.error('Error fetching all apps completion data:', err);
    }
  }, []);

  // Load completion data for all apps on mount
  useEffect(() => {
    fetchAllAppsCompletionData();
    
    // Listen for progress updates and refresh data
    const handleProgressUpdate = () => {
      fetchAllAppsCompletionData();
    };
    
    window.addEventListener('userProgressUpdated', handleProgressUpdate);
    
    return () => {
      window.removeEventListener('userProgressUpdated', handleProgressUpdate);
    };
  }, [fetchAllAppsCompletionData]);

  const handleTabOpen = (tabId: string, step: any) => {
    // Check if tab is already open
    if (openTabs.find(tab => tab.id === tabId)) {
      setActiveTab(tabId);
      return;
    }

    // Create tab content based on tabId
    let content: React.ReactNode;
    
    switch (tabId) {
      case 'database-guide':
        content = (
          <div className="space-y-6">
            <h3 className={`text-xl font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
              Database Integration Guide
            </h3>
            <div className="space-y-4">
              <div className={`p-4 rounded-lg ${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-50 dark:bg-gray-700'}`}>
                <h4 className={`font-medium mb-2 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                  Step 1: Obtain Database Credentials
                </h4>
                <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
                  Get your Supabase connection details from the project dashboard.
                </p>
                        </div>
              <div className={`p-4 rounded-lg ${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-50 dark:bg-gray-700'}`}>
                <h4 className={`font-medium mb-2 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                  Step 2: Configure n8n Connection
                </h4>
                <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
                  Add credentials in n8n and test the connection.
                </p>
                      </div>
                    </div>
          </div>
        );
        break;
      case 'supabase-config':
        content = (
          <div className="space-y-6">
            <h3 className={`text-xl font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
              Supabase Configuration
            </h3>
            <div className={`p-6 border-2 border-dashed rounded-lg text-center ${
              theme === 'gradient' ? 'border-gray-600' : 'border-gray-300 dark:border-gray-600'
            }`}>
              <Database className={`h-12 w-12 mx-auto mb-4 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-400'}`} />
              <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
                Supabase configuration interface would be embedded here
              </p>
            </div>
          </div>
        );
        break;
      case 'payment-guide':
        content = (
          <div className="space-y-6">
            <h3 className={`text-xl font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
              Payment Integration Guide
            </h3>
            <div className="space-y-4">
              <div className={`p-4 rounded-lg ${theme === 'gradient' ? 'bg-gray-700/50' : 'bg-gray-50 dark:bg-gray-700'}`}>
                <h4 className={`font-medium mb-2 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                  Step 1: Set Up Stripe Account
                </h4>
                <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
                  Create and configure your Stripe account for payments.
                </p>
              </div>
            </div>
          </div>
        );
        break;
      case 'webhook-config':
        content = (
          <div className="space-y-6">
            <h3 className={`text-xl font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
              Webhook Configuration
            </h3>
            <div className={`p-6 border-2 border-dashed rounded-lg text-center ${
              theme === 'gradient' ? 'border-gray-600' : 'border-gray-300 dark:border-gray-600'
            }`}>
              <Webhook className={`h-12 w-12 mx-auto mb-4 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-400'}`} />
              <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
                Webhook configuration interface would be embedded here
              </p>
            </div>
          </div>
        );
        break;
      case 'discord-config':
        content = (
          <div className="space-y-6">
            <h3 className={`text-xl font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
              Discord Integration
            </h3>
            <div className={`p-6 border-2 border-dashed rounded-lg text-center ${
              theme === 'gradient' ? 'border-gray-600' : 'border-gray-300 dark:border-gray-600'
            }`}>
              <MessageSquare className={`h-12 w-12 mx-auto mb-4 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-400'}`} />
              <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
                Discord bot configuration interface would be embedded here
              </p>
            </div>
          </div>
        );
        break;
      default:
        content = (
          <div className="text-center py-8">
            <p className={theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'}>
              Content for {step.title}
            </p>
          </div>
        );
    }

    const newTab = {
      id: tabId,
      title: step.title,
      content,
      closeable: true
    };

    setOpenTabs(prev => [...prev, newTab]);
    setActiveTab(tabId);
  };

  const handleTabClose = (tabId: string) => {
    setOpenTabs(prev => prev.filter(tab => tab.id !== tabId));
    if (activeTab === tabId) {
      const remainingTabs = openTabs.filter(tab => tab.id !== tabId);
      setActiveTab(remainingTabs.length > 0 ? remainingTabs[remainingTabs.length - 1].id : '');
    }
  };

  return (
    <div className="space-y-6 py-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className={`text-3xl font-bold ${
            theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'
          }`}>
            Integrate External Services
          </h1>
          <p className={`mt-2 ${
            theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-400'
          }`}>
            Connect your n8n agents to databases, payment processors, and communication platforms
          </p>
        </div>
        <div className="flex items-center space-x-4">
          {checklistCollapsed && (
            <button
              onClick={() => setChecklistCollapsed(false)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg border-2 transition-all duration-200 ${
                theme === 'gradient' 
                  ? 'bg-blue-600/20 border-blue-500 text-blue-300 hover:bg-blue-600/30' 
                  : 'bg-blue-50 dark:bg-blue-900/20 border-blue-500 text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-900/30'
              }`}
            >
              <div className="flex items-center space-x-2">
                <div className={`w-2 h-2 rounded-full ${theme === 'gradient' ? 'bg-blue-400' : 'bg-blue-500'}`}></div>
                <span className="font-medium">Checklist</span>
              </div>
            </button>
          )}
          <Plug className={`h-8 w-8 ${theme === 'gradient' ? 'text-blue-400' : 'text-blue-600'}`} />
        </div>
      </div>

      {/* Mini App Switcher */}
      <MiniAppSwitcher 
        apps={miniApps}
        activeApp={activeApp}
        onAppChange={setActiveApp}
        completionData={allAppsCompletionData}
      />

      <div className={`grid gap-6 ${checklistCollapsed ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-3'}`}>
        {/* Left Column - Collapsible Checklist */}
        {!checklistCollapsed && (
        <div className="lg:col-span-1">
            <div className={`${theme === 'gradient' ? 'bg-gray-800/50 border-gray-700' : 'bg-white dark:bg-gray-800/50 border-gray-200 dark:border-gray-700'} border rounded-lg overflow-hidden`}>
              <button
                onClick={() => setChecklistCollapsed(!checklistCollapsed)}
                className={`w-full px-4 py-3 flex items-center justify-between ${theme === 'gradient' ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 dark:bg-gray-700/50 hover:bg-gray-100 dark:hover:bg-gray-700'} transition-colors`}
              >
                <h3 className={`font-semibold ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>
                  Integration Checklist
                </h3>
                <Minus className={`h-5 w-5 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-500 dark:text-gray-300'}`} />
              </button>
              <div className="p-4">
                          <EnhancedChecklist
                  title=""
                  items={checklistItems[activeApp] || []}
                  toolId={activeApp}
                />
        </div>
            </div>
          </div>
        )}

        {/* Right Column - FAQ-Style Learning Path and Tabs */}
        <div className={checklistCollapsed ? 'col-span-1' : 'lg:col-span-2'}>
          <div className="space-y-6">
            {/* FAQ-Style Learning Path Section */}
            <div className={`${theme === 'gradient' ? 'bg-gray-800/30 border-gray-700' : 'bg-white dark:bg-gray-800/30 border-gray-200 dark:border-gray-700'} border rounded-lg p-6`}>
              <div className="flex items-center mb-4">
                {currentLearningPath.icon}
                <h2 className={`text-xl font-bold ml-3 ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>{currentLearningPath.title}</h2>
              </div>
              <p className={`mb-6 ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>{currentLearningPath.description}</p>
              
              {progressLoading ? (
                <div className="flex justify-center items-center py-8">
                  <Loader2 className={`h-8 w-8 animate-spin ${
                    theme === 'gradient' ? 'text-blue-400' : 'text-blue-600 dark:text-blue-400'
                  }`} />
                </div>
              ) : (
                /* FAQ-Style Steps */
                <div className="space-y-6">
                  {currentLearningPath.sections.map((section, sectionIndex) => {
                  let stepCounter = 0;
                  // Calculate step number offset for this section
                  for (let i = 0; i < sectionIndex; i++) {
                    stepCounter += currentLearningPath.sections[i].steps.length;
                  }
                  
                  return (
                    <div key={section.id} className="space-y-3">
                      {/* Section Header */}
                      <div className={`${theme === 'gradient' ? 'bg-gray-700/30 border-gray-600' : 'bg-gray-100 dark:bg-gray-700/30 border-gray-300 dark:border-gray-600'} border rounded-lg p-4`}>
                        <div className="flex items-center space-x-3">
                          <div className={`flex-shrink-0 w-8 h-8 rounded-lg flex items-center justify-center text-sm font-bold ${theme === 'gradient' ? 'bg-blue-500' : 'bg-blue-600'} text-white`}>
                            {sectionIndex + 1}
                          </div>
                          <div>
                            <h3 className={`font-semibold text-lg ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>{section.title}</h3>
                            <p className={`text-sm ${theme === 'gradient' ? 'text-gray-300' : 'text-gray-600 dark:text-gray-300'}`}>{section.description}</p>
                          </div>
                          <div className="ml-auto">
                            <span className={`text-xs ${theme === 'gradient' ? 'bg-gray-600 text-gray-200' : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200'} px-3 py-1 rounded-full`}>
                              {section.steps.length} steps
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Section Steps */}
                      <div className="space-y-2 ml-4">
                        {section.steps.map((step, stepIndex) => {
                          const isCompleted = isStepCompleted(step.id);
                          const isExpanded = expandedStep === step.id;
                          const globalStepNumber = stepCounter + stepIndex + 1;
                          
                          return (
                            <div key={step.id} className={`${theme === 'gradient' ? 'border-gray-600' : 'border-gray-200 dark:border-gray-600'} border rounded-lg overflow-hidden`}>
                              <button
                                onClick={() => toggleStep(step.id)}
                                className={`w-full p-4 text-left ${theme === 'gradient' ? 'hover:bg-gray-700/30' : 'hover:bg-gray-50 dark:hover:bg-gray-700/30'} transition-colors`}
                              >
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-3">
                                    <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                                      isCompleted ? 'bg-green-500 text-white' : `${theme === 'gradient' ? 'bg-blue-500' : 'bg-blue-600'} text-white`
                                    }`}>
                                      {isCompleted ? <CheckCircle className="h-4 w-4" /> : globalStepNumber}
                                    </div>
                                    <div className="flex-1">
                                      <h4 className={`font-medium ${theme === 'gradient' ? 'text-white' : 'text-gray-900 dark:text-white'}`}>{step.title}</h4>
                                      <p className={`text-sm mt-1 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-500 dark:text-gray-400'}`}>{step.description}</p>
                                    </div>
                                  </div>
                                  <div className="flex items-center space-x-3">
                                    <div className="flex items-center space-x-2 text-xs">
                                      <span className={`${theme === 'gradient' ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'} px-2 py-1 rounded`}>
                                        {step.estimated_time}
                                      </span>
                                      <span className={`px-2 py-1 rounded ${
                                        step.difficulty === 'Beginner' ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400' :
                                        step.difficulty === 'Intermediate' ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-400' :
                                        'bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400'
                                      }`}>
                                        {step.difficulty}
                                      </span>
                                    </div>
                                    {isExpanded ? (
                                      <ChevronDown className={`h-5 w-5 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-400'}`} />
                                    ) : (
                                      <ChevronRight className={`h-5 w-5 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-400'}`} />
                                    )}
                                  </div>
                                </div>
                              </button>
                              
                              {isExpanded && (
                                <div className={`px-6 pb-6 ${theme === 'gradient' ? 'bg-gray-800/20' : 'bg-gray-50 dark:bg-gray-800/20'}`}>
                                  <div className="border-t border-gray-200 dark:border-gray-600 pt-4">
                                    {step.content}
                                  </div>
                                  <div className="flex justify-end mt-6">
                                    {isCompleted ? (
                                      <button
                                        onClick={() => handleMarkStepIncomplete(step.id)}
                                        className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm flex items-center"
                                      >
                                        <Minus className="h-4 w-4 mr-2" />
                                        Mark Incomplete
                                      </button>
                                    ) : (
                                      <button
                                        onClick={() => handleMarkStepComplete(step.id)}
                                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm flex items-center"
                                      >
                                        <CheckCircle className="h-4 w-4 mr-2" />
                                        Mark Complete
                                      </button>
                                    )}
                                  </div>
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
              </div>
              )}
            </div>

          {/* Progress Bar */}
          <div className={`mt-6 pt-4 ${theme === 'gradient' ? 'border-gray-700' : 'border-gray-200 dark:border-gray-700'} border-t`}>
            <div className={`flex items-center justify-between text-sm mb-2 ${theme === 'gradient' ? 'text-gray-400' : 'text-gray-600 dark:text-gray-400'}`}>
              <span>Progress</span>
              <span>{completedSteps.size}/{totalSteps} steps completed</span>
            </div>
            <div className={`w-full ${theme === 'gradient' ? 'bg-gray-700' : 'bg-gray-200 dark:bg-gray-700'} rounded-full h-2`}>
              <div 
                className="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500"
                style={{ width: `${(completedSteps.size / totalSteps) * 100}%` }}
              ></div>
            </div>
          </div>

          {/* Main Content Tabs */}
          <MainContentTabs
            tabs={openTabs}
            activeTab={activeTab}
            onTabChange={setActiveTab}
            onTabClose={handleTabClose}
          />
          </div>
        </div>
      </div>
    </div>
  );
};

export default N8nIntegrate;